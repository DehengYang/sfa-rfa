=================================================
Project : time_4	start : 19/03/13 07:50
Current failed test : org.joda.time.TestPartial_Basics::testWith3 | 19/03/13 07:51
1552488660 s for the statement.

Wed Mar 13 07:51:00 PDT 2019 org.joda.time.Partial,464
163 s for the statement.

Wed Mar 13 07:53:44 PDT 2019 org.joda.time.Partial,445

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index<2){
throw new IllegalArgumentException("The divisor must be at least 2");
}
if(rangeField.compareTo(loopRangeField)>0){
break;
}

Time : 19/03/13 07:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/13 07:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/13 07:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/13 08:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/13 08:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/13 08:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>index){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/13 08:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/13 08:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>index){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/13 08:07
----------------------------------------
895 s for the statement.

Wed Mar 13 08:08:39 PDT 2019 org.joda.time.Partial,433
57 s for the statement.

Wed Mar 13 08:09:36 PDT 2019 org.joda.time.field.ZeroIsMaxDateTimeField,178
24 s for the statement.

Wed Mar 13 08:10:00 PDT 2019 org.joda.time.Partial,461
255 s for the statement.

Wed Mar 13 08:14:16 PDT 2019 org.joda.time.chrono.BaseChronology,138
734 s for the statement.

Wed Mar 13 08:26:30 PDT 2019 org.joda.time.field.BaseDurationField,147
37 s for the statement.

Wed Mar 13 08:27:08 PDT 2019 org.joda.time.chrono.CopticChronology,140
59 s for the statement.

Wed Mar 13 08:28:07 PDT 2019 org.joda.time.base.AbstractPartial,170
199 s for the statement.

Wed Mar 13 08:31:26 PDT 2019 org.joda.time.Partial,438

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}

Time : 19/03/13 08:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(index==0){
return this;
}
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}

Time : 19/03/13 08:34
----------------------------------------
402 s for the statement.

Wed Mar 13 08:38:09 PDT 2019 org.joda.time.Partial,457
373 s for the statement.

Wed Mar 13 08:44:22 PDT 2019 Wed Mar 13 08:44:22 PDT 2019 : org.joda.time.chrono.CopticChronology,151=>Find no block
0 s for the statement.

Wed Mar 13 08:44:22 PDT 2019 org.joda.time.chrono.BasicFixedMonthChronology,148
0 s for the statement.

Wed Mar 13 08:44:23 PDT 2019 Wed Mar 13 08:44:23 PDT 2019 : org.joda.time.chrono.CopticChronology,79=>Find no block
0 s for the statement.

Wed Mar 13 08:44:23 PDT 2019 org.joda.time.field.ZeroIsMaxDateTimeField,111
0 s for the statement.

Wed Mar 13 08:44:24 PDT 2019 org.joda.time.chrono.CopticChronology,257
2 s for the statement.

Wed Mar 13 08:44:26 PDT 2019 org.joda.time.chrono.CopticChronology,248
0 s for the statement.

Wed Mar 13 08:44:27 PDT 2019 org.joda.time.chrono.BasicFixedMonthChronology,158
1 s for the statement.

Wed Mar 13 08:44:28 PDT 2019 org.joda.time.Partial,431

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(index==-1){
DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
int[] newValues=new int[newTypes.length];
int i=0;
DurationField unitField=fieldType.getDurationType().getField(iChronology);
if(unitField.isSupported()){
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}
}
System.arraycopy(iTypes,0,newTypes,0,i);
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;
System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i);
System.arraycopy(iValues,i,newValues,i+1,newValues.length-i);
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(newPartial,newValues);
return newPartial;
}

Time : 19/03/13 08:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(index==-1){
DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
int[] newValues=new int[newTypes.length];
int i=0;
DurationField unitField=fieldType.getDurationType().getField(iChronology);
if(unitField.isSupported()){
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}
}
System.arraycopy(iTypes,0,newTypes,0,i);
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;
System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i);
System.arraycopy(iValues,i,newValues,i+1,newValues.length-i);
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(newPartial,newValues);
return newPartial;
}

Time : 19/03/13 08:46
----------------------------------------
263 s for the statement.

Wed Mar 13 08:48:52 PDT 2019 org.joda.time.field.BaseDurationField,150
0 s for the statement.

Wed Mar 13 08:48:52 PDT 2019 org.joda.time.DurationFieldType,304
273 s for the statement.

Wed Mar 13 08:53:26 PDT 2019 org.joda.time.chrono.GJChronology,593
83 s for the statement.

Wed Mar 13 08:54:49 PDT 2019 org.joda.time.Partial,442
0 s for the statement.

Wed Mar 13 08:54:50 PDT 2019 org.joda.time.Partial,449
0 s for the statement.

Wed Mar 13 08:54:50 PDT 2019 org.joda.time.field.ZeroIsMaxDateTimeField,138
0 s for the statement.

Wed Mar 13 08:54:50 PDT 2019 org.joda.time.Partial,466

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new MonthDay(this,iChronology),newValues);
return newPartial;

Time : 19/03/13 08:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new TimeOfDay(this,iChronology),newValues);
return newPartial;

Time : 19/03/13 08:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new YearMonth(this,iChronology),newValues);
return newPartial;

Time : 19/03/13 08:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new YearMonthDay(this,iChronology),newValues);
return newPartial;

Time : 19/03/13 08:58
----------------------------------------
246 s for the statement.

Wed Mar 13 08:58:56 PDT 2019 org.joda.time.Partial,458

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
value=newValues[0];
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;

Time : 19/03/13 09:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
value-='0';
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;

Time : 19/03/13 09:04
----------------------------------------
366 s for the statement.

Wed Mar 13 09:05:02 PDT 2019 org.joda.time.Partial,465
0 s for the statement.

Wed Mar 13 09:05:03 PDT 2019 org.joda.time.DateTimeFieldType,514

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case CLOCKHOUR_OF_DAY :
return chronology.era();


Time : 19/03/13 09:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case CLOCKHOUR_OF_DAY :
return chronology.halfdayOfDay();


Time : 19/03/13 09:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case CLOCKHOUR_OF_DAY :
return chronology.era();

case HOUR_OF_DAY :


Time : 19/03/13 09:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case CLOCKHOUR_OF_DAY :
return chronology.halfdayOfDay();

case HOUR_OF_DAY :


Time : 19/03/13 09:10
----------------------------------------
425 s for the statement.

Wed Mar 13 09:12:09 PDT 2019 org.joda.time.Partial,193
5 s for the statement.

Wed Mar 13 09:12:15 PDT 2019 org.joda.time.chrono.BaseChronology,183

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
values=new int[partial.size()];
int size=partial.size();
for(int i=0;i<size;i++){
int value=values[i];
DateTimeField field=partial.getField(i);
if(value<field.getMinimumValue()){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(field.getMinimumValue()),null);
}
if(value>field.getMaximumValue()){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),null,Integer.valueOf(field.getMaximumValue()));
}
}

Time : 19/03/13 09:36
----------------------------------------
1688 s for the statement.

Wed Mar 13 09:40:23 PDT 2019 org.joda.time.chrono.BasicFixedMonthChronology,101
26 s for the statement.

Wed Mar 13 09:40:50 PDT 2019 org.joda.time.Partial,436

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int[] newValues=new int[newTypes.length];
int i=0;
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
DurationField unitField=fieldType.getDurationType().getField(iChronology);

Time : 19/03/13 09:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int[] newValues=new int[newTypes.length];
int i=0;
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
DurationField unitField=fieldType.getDurationType().getField(iChronology);

Time : 19/03/13 09:42
----------------------------------------
327 s for the statement.

Wed Mar 13 09:46:18 PDT 2019 org.joda.time.Partial,333
148 s for the statement.

Wed Mar 13 09:48:46 PDT 2019 org.joda.time.field.BaseDurationField,155
0 s for the statement.

Wed Mar 13 09:48:46 PDT 2019 org.joda.time.chrono.BaseChronology,192
0 s for the statement.

Wed Mar 13 09:48:46 PDT 2019 org.joda.time.chrono.BasicFixedMonthChronology,59
16 s for the statement.

Wed Mar 13 09:49:03 PDT 2019 Wed Mar 13 09:49:03 PDT 2019 : org.joda.time.DurationFieldType,284=>Find no block
0 s for the statement.

Wed Mar 13 09:49:04 PDT 2019 org.joda.time.Partial,297
122 s for the statement.

Wed Mar 13 09:51:06 PDT 2019 org.joda.time.chrono.CopticChronology,141
0 s for the statement.

Wed Mar 13 09:51:07 PDT 2019 org.joda.time.chrono.CopticChronology,255
0 s for the statement.

Wed Mar 13 09:51:07 PDT 2019 org.joda.time.Partial,344
6 s for the statement.

Wed Mar 13 09:51:13 PDT 2019 org.joda.time.field.ZeroIsMaxDateTimeField,148
1 s for the statement.

Wed Mar 13 09:51:14 PDT 2019 org.joda.time.chrono.CopticChronology,124
203 s for the statement.

Wed Mar 13 09:54:38 PDT 2019 org.joda.time.Partial,248
137 s for the statement.

Wed Mar 13 09:56:56 PDT 2019 org.joda.time.chrono.CopticChronology,161
0 s for the statement.

Wed Mar 13 09:56:56 PDT 2019 org.joda.time.field.BaseDurationField,152
0 s for the statement.

Wed Mar 13 09:56:56 PDT 2019 org.joda.time.Partial,191
113 s for the statement.

Wed Mar 13 09:58:50 PDT 2019 org.joda.time.Partial,440
10 s for the statement.

Wed Mar 13 09:59:00 PDT 2019 org.joda.time.chrono.ZonedChronology,378
1 s for the statement.

Wed Mar 13 09:59:02 PDT 2019 Wed Mar 13 09:59:02 PDT 2019 : org.joda.time.chrono.CopticChronology,72=>Find no block
0 s for the statement.

Wed Mar 13 09:59:02 PDT 2019 org.joda.time.chrono.CopticChronology,149
35 s for the statement.

Wed Mar 13 09:59:37 PDT 2019 org.joda.time.Partial,432
0 s for the statement.

Wed Mar 13 09:59:38 PDT 2019 org.joda.time.DateTimeFieldType,457
0 s for the statement.

Wed Mar 13 09:59:39 PDT 2019 org.joda.time.Partial,199
235 s for the statement.

Wed Mar 13 10:03:34 PDT 2019 org.joda.time.Partial,427
61 s for the statement.

Wed Mar 13 10:04:36 PDT 2019 org.joda.time.Partial,460

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
iChronology.validate(new Partial(iChronology,newTypes,newValues),newValues);
newValues[i]=value;
System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i);
System.arraycopy(iValues,i,newValues,i+1,newValues.length-i);

Time : 19/03/13 10:05
----------------------------------------
284 s for the statement.

Wed Mar 13 10:09:21 PDT 2019 org.joda.time.Partial,296
0 s for the statement.

Wed Mar 13 10:09:21 PDT 2019 org.joda.time.chrono.BaseChronology,186
0 s for the statement.

Wed Mar 13 10:09:21 PDT 2019 org.joda.time.chrono.BaseChronology,137
0 s for the statement.

Wed Mar 13 10:09:21 PDT 2019 Wed Mar 13 10:09:21 PDT 2019 : org.joda.time.chrono.BaseChronology,213=>Find no block
0 s for the statement.

Wed Mar 13 10:09:21 PDT 2019 org.joda.time.Partial,443
0 s for the statement.

Wed Mar 13 10:09:21 PDT 2019 org.joda.time.Partial,216
888 s for the statement.

Wed Mar 13 10:24:10 PDT 2019 Wed Mar 13 10:24:10 PDT 2019 : org.joda.time.chrono.BasicFixedMonthChronology,60=>Find no block
0 s for the statement.

Wed Mar 13 10:24:11 PDT 2019 org.joda.time.Partial,441
0 s for the statement.

Wed Mar 13 10:24:11 PDT 2019 org.joda.time.Partial,214
2 s for the statement.

Wed Mar 13 10:24:13 PDT 2019 org.joda.time.Partial,298
0 s for the statement.

Wed Mar 13 10:24:13 PDT 2019 org.joda.time.Partial,207
329 s for the statement.

Wed Mar 13 10:29:42 PDT 2019 org.joda.time.chrono.CopticChronology,256
0 s for the statement.

Wed Mar 13 10:29:42 PDT 2019 org.joda.time.Partial,196
6 s for the statement.

Wed Mar 13 10:29:48 PDT 2019 org.joda.time.chrono.GJChronology,940
459 s for the statement.

Wed Mar 13 10:37:28 PDT 2019 org.joda.time.Partial,208
0 s for the statement.

Wed Mar 13 10:37:28 PDT 2019 org.joda.time.chrono.GJChronology,746
805 s for the statement.

Wed Mar 13 10:50:53 PDT 2019 org.joda.time.chrono.CopticChronology,252
0 s for the statement.

Wed Mar 13 10:50:54 PDT 2019 org.joda.time.chrono.CopticChronology,249
0 s for the statement.

Wed Mar 13 10:50:54 PDT 2019 org.joda.time.base.AbstractPartial,171
0 s for the statement.

Wed Mar 13 10:50:54 PDT 2019 org.joda.time.chrono.BaseChronology,135
0 s for the statement.

Wed Mar 13 10:50:54 PDT 2019 org.joda.time.DateTimeFieldType,520
144 s for the statement.

Wed Mar 13 10:53:19 PDT 2019 org.joda.time.Partial,190
0 s for the statement.

Wed Mar 13 10:53:19 PDT 2019 org.joda.time.Partial,218
0 s for the statement.

Wed Mar 13 10:53:19 PDT 2019 org.joda.time.Partial,243
148 s for the statement.

Wed Mar 13 10:55:48 PDT 2019 Wed Mar 13 10:55:48 PDT 2019 : org.joda.time.Partial,446=>Find no block
0 s for the statement.

Wed Mar 13 10:55:48 PDT 2019 org.joda.time.chrono.CopticChronology,214
502 s for the statement.

Wed Mar 13 11:04:11 PDT 2019 org.joda.time.Partial,448
0 s for the statement.

Wed Mar 13 11:04:11 PDT 2019 Wed Mar 13 11:04:11 PDT 2019 : org.joda.time.DateTimeFieldType,482=>Find no block
0 s for the statement.

Wed Mar 13 11:04:11 PDT 2019 org.joda.time.DurationFieldType,302
250 s for the statement.

Wed Mar 13 11:08:21 PDT 2019 org.joda.time.DurationFieldType,282
1130 s for the statement.

Wed Mar 13 11:27:12 PDT 2019 org.joda.time.Partial,459
256 s for the statement.

Wed Mar 13 11:31:28 PDT 2019 org.joda.time.chrono.BaseChronology,202
613 s for the statement.

Wed Mar 13 11:41:42 PDT 2019 org.joda.time.field.BaseDurationField,149
0 s for the statement.

Wed Mar 13 11:41:42 PDT 2019 org.joda.time.chrono.CopticChronology,138
0 s for the statement.

Wed Mar 13 11:41:42 PDT 2019 org.joda.time.field.BaseDateTimeField,818
33 s for the statement.

Wed Mar 13 11:42:16 PDT 2019 org.joda.time.Partial,430

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(fieldType==null){
throw new IllegalArgumentException("The field type must not be null");
}
int index=indexOf(fieldType);

Time : 19/03/13 11:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(fieldType==null){
throw new IllegalArgumentException("The DateTimeFieldType must not be null");
}
int index=indexOf(fieldType);

Time : 19/03/13 11:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
int index=indexOf(fieldType);

Time : 19/03/13 11:44
----------------------------------------
193 s for the statement.

Wed Mar 13 11:45:29 PDT 2019 org.joda.time.chrono.CopticChronology,152
113 s for the statement.

Wed Mar 13 11:47:23 PDT 2019 org.joda.time.base.AbstractPartial,175
94 s for the statement.

Wed Mar 13 11:48:57 PDT 2019 org.joda.time.DateTimeZone,1003
845 s for the statement.

Wed Mar 13 12:03:03 PDT 2019 org.joda.time.DateTimeFieldType,516
165 s for the statement.

Wed Mar 13 12:05:48 PDT 2019 org.joda.time.chrono.BuddhistChronology,86
0 s for the statement.

Wed Mar 13 12:05:49 PDT 2019 org.joda.time.chrono.BaseChronology,187
0 s for the statement.

Wed Mar 13 12:05:49 PDT 2019 Wed Mar 13 12:05:49 PDT 2019 : org.joda.time.Partial,249=>Find no block
0 s for the statement.

Wed Mar 13 12:05:49 PDT 2019 org.joda.time.chrono.GJChronology,675
315 s for the statement.

Wed Mar 13 12:11:04 PDT 2019 org.joda.time.Partial,444
0 s for the statement.

Wed Mar 13 12:11:04 PDT 2019 org.joda.time.Partial,447
0 s for the statement.

Wed Mar 13 12:11:04 PDT 2019 org.joda.time.DateTimeFieldType,480
Timeout time : 19/03/13 12:51
