=================================================
Project : closure_55	start : 19/03/11 01:01
Current failed test : com.google.javascript.jscomp.FunctionRewriterTest::testIssue538 | 19/03/11 01:02
1552291326 s for the statement.

Mon Mar 11 01:02:06 PDT 2019 com.google.javascript.rhino.Node,969
867 s for the statement.

Mon Mar 11 01:16:34 PDT 2019 com.google.javascript.rhino.Node,1133
2036 s for the statement.

Mon Mar 11 01:50:31 PDT 2019 com.google.javascript.rhino.Node,1090
962 s for the statement.

Mon Mar 11 02:06:33 PDT 2019 com.google.javascript.jscomp.AstValidator,240
715 s for the statement.

Mon Mar 11 02:18:29 PDT 2019 com.google.javascript.rhino.Node,1078
965 s for the statement.

Mon Mar 11 02:34:35 PDT 2019 com.google.javascript.rhino.Node,628
515 s for the statement.

Mon Mar 11 02:43:10 PDT 2019 com.google.javascript.jscomp.parsing.IRFactory,780
537 s for the statement.

Mon Mar 11 02:52:08 PDT 2019 com.google.javascript.jscomp.FunctionRewriter,93

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(helperCodeCost>(helperCodeCost+SAVINGS_THRESHOLD)){
for(Reduction reduction : reductions){
reduction.apply();
}
Node addingRoot=compiler.getNodeForCodeInsertion(null);
addingRoot.addChildrenToFront(helperCode);
compiler.reportCodeChange();
}

Time : 19/03/11 02:52
----------------------------------------
501 s for the statement.

Mon Mar 11 03:00:30 PDT 2019 com.google.javascript.rhino.Node,968
0 s for the statement.

Mon Mar 11 03:00:30 PDT 2019 com.google.javascript.jscomp.Compiler,1294
140 s for the statement.

Mon Mar 11 03:02:50 PDT 2019 com.google.javascript.jscomp.AstValidator,162
1246 s for the statement.

Mon Mar 11 03:23:36 PDT 2019 com.google.javascript.jscomp.CodeGenerator,948
737 s for the statement.

Mon Mar 11 03:35:54 PDT 2019 com.google.javascript.jscomp.AstValidator,739
1690 s for the statement.

Mon Mar 11 04:04:05 PDT 2019 com.google.javascript.jscomp.FunctionRewriter,218
2470 s for the statement.

Mon Mar 11 04:45:16 PDT 2019 com.google.javascript.jscomp.CodeGenerator,960
629 s for the statement.

Mon Mar 11 04:55:46 PDT 2019 com.google.javascript.rhino.Node,964
270 s for the statement.

Mon Mar 11 05:00:17 PDT 2019 com.google.javascript.jscomp.parsing.IRFactory,795

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(node.getType()!=Token.NAME){
continue;
}
if(getFnParamNode(value).hasChildren()){
reportGetterParam(el.getLeft());
}

Time : 19/03/11 05:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(value.hasOneChild());
if(key.getType()!=Token.NAME){
continue;
}
if(el.isSetter()){
key.setType(Token.SET);
Preconditions.checkState(value.getType()==Token.FUNCTION);
if(!getFnParamNode(value).hasOneChild()){
reportSetterParam(el.getLeft());
}
}

Time : 19/03/11 05:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkArgument(node.getType()==Token.CALL);
if(node.getFirstChild()==null){
return node;
}
if(el.isSetter()){
key.setType(Token.SET);
Preconditions.checkState(value.getType()==Token.FUNCTION);
if(!getFnParamNode(value).hasOneChild()){
reportSetterParam(el.getLeft());
}
}

Time : 19/03/11 05:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(key.getType()!=Token.NAME){
continue;
}
if(el.isGetter()){
key.setType(Token.GET);
Preconditions.checkState(value.getType()==Token.FUNCTION);
if(getFnParamNode(value).hasChildren()){
reportGetterParam(el.getLeft());
}
}else if(el.isSetter()){
key.setType(Token.SET);
Preconditions.checkState(value.getType()==Token.FUNCTION);
if(!getFnParamNode(value).hasOneChild()){
reportSetterParam(el.getLeft());
}
}

Time : 19/03/11 05:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(node.getFirstChild()==null){
return node;
}
if(el.isGetter()){
key.setType(Token.GET);
Preconditions.checkState(value.getType()==Token.FUNCTION);
if(getFnParamNode(value).hasChildren()){
reportGetterParam(el.getLeft());
}
}else if(el.isSetter()){
key.setType(Token.SET);
Preconditions.checkState(value.getType()==Token.FUNCTION);
if(!getFnParamNode(value).hasOneChild()){
reportSetterParam(el.getLeft());
}
}

Time : 19/03/11 05:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((key.getType()!=Token.STRING)||(value.getType()!=Token.STRING)){
return node;
}
if(el.isGetter()){
key.setType(Token.GET);
Preconditions.checkState(value.getType()==Token.FUNCTION);
if(getFnParamNode(value).hasChildren()){
reportGetterParam(el.getLeft());
}
}else if(el.isSetter()){
key.setType(Token.SET);
Preconditions.checkState(value.getType()==Token.FUNCTION);
if(!getFnParamNode(value).hasOneChild()){
reportSetterParam(el.getLeft());
}
}

Time : 19/03/11 05:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(node.getFirstChild()==null){
return node;
}
if((key.getType()!=Token.STRING)||(value.getType()!=Token.STRING)){
return node;
}
if(el.isGetter()){
key.setType(Token.GET);
Preconditions.checkState(value.getType()==Token.FUNCTION);
if(getFnParamNode(value).hasChildren()){
reportGetterParam(el.getLeft());
}
}else if(el.isSetter()){
key.setType(Token.SET);
Preconditions.checkState(value.getType()==Token.FUNCTION);
if(!getFnParamNode(value).hasOneChild()){
reportSetterParam(el.getLeft());
}
}

Time : 19/03/11 05:58
----------------------------------------
Timeout time : 19/03/11 06:02
