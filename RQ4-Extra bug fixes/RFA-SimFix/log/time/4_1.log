=================================================
Project : time_4	start : 19/03/10 14:36
Current failed test : org.joda.time.TestPartial_Basics::testWith3 | 19/03/10 14:36
1552253791 s for the statement.

Sun Mar 10 14:36:31 PDT 2019 org.joda.time.field.ZeroIsMaxDateTimeField,111
1 s for the statement.

Sun Mar 10 14:36:33 PDT 2019 org.joda.time.field.ZeroIsMaxDateTimeField,138
0 s for the statement.

Sun Mar 10 14:36:33 PDT 2019 org.joda.time.field.ZeroIsMaxDateTimeField,178
24 s for the statement.

Sun Mar 10 14:36:58 PDT 2019 org.joda.time.field.ZeroIsMaxDateTimeField,148
1 s for the statement.

Sun Mar 10 14:36:59 PDT 2019 org.joda.time.DateTimeFieldType,514

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case CLOCKHOUR_OF_DAY :
return chronology.era();


Time : 19/03/10 14:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case CLOCKHOUR_OF_DAY :
return chronology.halfdayOfDay();


Time : 19/03/10 14:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case CLOCKHOUR_OF_DAY :
return chronology.era();

case HOUR_OF_DAY :


Time : 19/03/10 14:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case CLOCKHOUR_OF_DAY :
return chronology.halfdayOfDay();

case HOUR_OF_DAY :


Time : 19/03/10 14:42
----------------------------------------
426 s for the statement.

Sun Mar 10 14:44:05 PDT 2019 org.joda.time.Partial,447

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index<2){
throw new IllegalArgumentException("The divisor must be at least 2");
}
if(rangeField.compareTo(loopRangeField)>0){
break;
}

Time : 19/03/10 14:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/10 14:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/10 14:48
----------------------------------------
506 s for the statement.

Sun Mar 10 14:52:32 PDT 2019 org.joda.time.Partial,448
0 s for the statement.

Sun Mar 10 14:52:32 PDT 2019 org.joda.time.Partial,449
0 s for the statement.

Sun Mar 10 14:52:32 PDT 2019 org.joda.time.Partial,445

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/10 14:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/10 14:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/10 14:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>index){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/10 14:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/10 14:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>index){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 19/03/10 14:58
----------------------------------------
451 s for the statement.

Sun Mar 10 15:00:04 PDT 2019 org.joda.time.field.BaseDurationField,150
0 s for the statement.

Sun Mar 10 15:00:05 PDT 2019 org.joda.time.DateTimeFieldType,457
0 s for the statement.

Sun Mar 10 15:00:06 PDT 2019 Sun Mar 10 15:00:06 PDT 2019 : org.joda.time.Partial,446=>Find no block
0 s for the statement.

Sun Mar 10 15:00:06 PDT 2019 org.joda.time.Partial,443
55 s for the statement.

Sun Mar 10 15:01:01 PDT 2019 org.joda.time.Partial,444
0 s for the statement.

Sun Mar 10 15:01:01 PDT 2019 org.joda.time.Partial,439

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}

Time : 19/03/10 15:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(index==0){
return this;
}
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}

Time : 19/03/10 15:03
----------------------------------------
337 s for the statement.

Sun Mar 10 15:06:39 PDT 2019 org.joda.time.Partial,440
10 s for the statement.

Sun Mar 10 15:06:50 PDT 2019 org.joda.time.Partial,441
0 s for the statement.

Sun Mar 10 15:06:50 PDT 2019 org.joda.time.Partial,442
0 s for the statement.

Sun Mar 10 15:06:51 PDT 2019 org.joda.time.Partial,432
57 s for the statement.

Sun Mar 10 15:07:48 PDT 2019 org.joda.time.Partial,433
0 s for the statement.

Sun Mar 10 15:07:48 PDT 2019 org.joda.time.Partial,436

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int[] newValues=new int[newTypes.length];
int i=0;
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
DurationField unitField=fieldType.getDurationType().getField(iChronology);

Time : 19/03/10 15:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int[] newValues=new int[newTypes.length];
int i=0;
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
DurationField unitField=fieldType.getDurationType().getField(iChronology);

Time : 19/03/10 15:09
----------------------------------------
326 s for the statement.

Sun Mar 10 15:13:15 PDT 2019 org.joda.time.Partial,437
0 s for the statement.

Sun Mar 10 15:13:15 PDT 2019 org.joda.time.Partial,438
76 s for the statement.

Sun Mar 10 15:14:32 PDT 2019 org.joda.time.Partial,456
373 s for the statement.

Sun Mar 10 15:20:45 PDT 2019 org.joda.time.Partial,457
0 s for the statement.

Sun Mar 10 15:20:45 PDT 2019 org.joda.time.Partial,458

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
value=newValues[0];
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;

Time : 19/03/10 15:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
value-='0';
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;

Time : 19/03/10 15:26
----------------------------------------
365 s for the statement.

Sun Mar 10 15:26:51 PDT 2019 org.joda.time.Partial,459
254 s for the statement.

Sun Mar 10 15:31:05 PDT 2019 org.joda.time.Partial,460

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
iChronology.validate(new Partial(iChronology,newTypes,newValues),newValues);
newValues[i]=value;
System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i);
System.arraycopy(iValues,i,newValues,i+1,newValues.length-i);

Time : 19/03/10 15:31
----------------------------------------
282 s for the statement.

Sun Mar 10 15:35:48 PDT 2019 org.joda.time.Partial,461
254 s for the statement.

Sun Mar 10 15:40:02 PDT 2019 org.joda.time.Partial,464
161 s for the statement.

Sun Mar 10 15:42:44 PDT 2019 org.joda.time.Partial,465

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new MonthDay(this,iChronology),newValues);
return newPartial;

Time : 19/03/10 15:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new TimeOfDay(this,iChronology),newValues);
return newPartial;

Time : 19/03/10 15:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new YearMonth(this,iChronology),newValues);
return newPartial;

Time : 19/03/10 15:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new YearMonthDay(this,iChronology),newValues);
return newPartial;

Time : 19/03/10 15:46
----------------------------------------
245 s for the statement.

Sun Mar 10 15:46:50 PDT 2019 org.joda.time.Partial,466
0 s for the statement.

Sun Mar 10 15:46:50 PDT 2019 org.joda.time.Partial,430

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(fieldType==null){
throw new IllegalArgumentException("The field type must not be null");
}
int index=indexOf(fieldType);

Time : 19/03/10 15:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(fieldType==null){
throw new IllegalArgumentException("The DateTimeFieldType must not be null");
}
int index=indexOf(fieldType);

Time : 19/03/10 15:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
int index=indexOf(fieldType);

Time : 19/03/10 15:49
----------------------------------------
191 s for the statement.

Sun Mar 10 15:50:02 PDT 2019 org.joda.time.Partial,431

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(index==-1){
DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
int[] newValues=new int[newTypes.length];
int i=0;
DurationField unitField=fieldType.getDurationType().getField(iChronology);
if(unitField.isSupported()){
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}
}
System.arraycopy(iTypes,0,newTypes,0,i);
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;
System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i);
System.arraycopy(iValues,i,newValues,i+1,newValues.length-i);
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(newPartial,newValues);
return newPartial;
}

Time : 19/03/10 15:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(index==-1){
DateTimeFieldType[] newTypes=new DateTimeFieldType[iTypes.length+1];
int[] newValues=new int[newTypes.length];
int i=0;
DurationField unitField=fieldType.getDurationType().getField(iChronology);
if(unitField.isSupported()){
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}
}
System.arraycopy(iTypes,0,newTypes,0,i);
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;
System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i);
System.arraycopy(iValues,i,newValues,i+1,newValues.length-i);
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(newPartial,newValues);
return newPartial;
}

Time : 19/03/10 15:52
----------------------------------------
262 s for the statement.

Sun Mar 10 15:54:25 PDT 2019 org.joda.time.Partial,427
61 s for the statement.

Sun Mar 10 15:55:26 PDT 2019 org.joda.time.Partial,296
122 s for the statement.

Sun Mar 10 15:57:28 PDT 2019 org.joda.time.Partial,297
0 s for the statement.

Sun Mar 10 15:57:28 PDT 2019 org.joda.time.Partial,298
0 s for the statement.

Sun Mar 10 15:57:28 PDT 2019 org.joda.time.Partial,299
0 s for the statement.

Sun Mar 10 15:57:29 PDT 2019 Sun Mar 10 15:57:29 PDT 2019 : org.joda.time.Partial,300=>Find no block
0 s for the statement.

Sun Mar 10 15:57:29 PDT 2019 org.joda.time.base.AbstractPartial,175
259 s for the statement.

Sun Mar 10 16:01:49 PDT 2019 org.joda.time.Partial,217
595 s for the statement.

Sun Mar 10 16:11:44 PDT 2019 org.joda.time.Partial,218
351 s for the statement.

Sun Mar 10 16:17:35 PDT 2019 org.joda.time.Partial,221
0 s for the statement.

Sun Mar 10 16:17:35 PDT 2019 org.joda.time.DurationFieldType,298
230 s for the statement.

Sun Mar 10 16:21:26 PDT 2019 org.joda.time.field.BaseDurationField,155
0 s for the statement.

Sun Mar 10 16:21:27 PDT 2019 org.joda.time.Partial,248
137 s for the statement.

Sun Mar 10 16:23:44 PDT 2019 Sun Mar 10 16:23:44 PDT 2019 : org.joda.time.Partial,249=>Find no block
0 s for the statement.

Sun Mar 10 16:23:44 PDT 2019 org.joda.time.Partial,246
0 s for the statement.

Sun Mar 10 16:23:45 PDT 2019 org.joda.time.Partial,247
0 s for the statement.

Sun Mar 10 16:23:45 PDT 2019 org.joda.time.Partial,212
501 s for the statement.

Sun Mar 10 16:32:07 PDT 2019 org.joda.time.Partial,213
248 s for the statement.

Sun Mar 10 16:36:15 PDT 2019 org.joda.time.Partial,214
2 s for the statement.

Sun Mar 10 16:36:17 PDT 2019 org.joda.time.Partial,215
0 s for the statement.

Sun Mar 10 16:36:17 PDT 2019 org.joda.time.Partial,216
0 s for the statement.

Sun Mar 10 16:36:17 PDT 2019 org.joda.time.Partial,243
149 s for the statement.

Sun Mar 10 16:38:47 PDT 2019 org.joda.time.Partial,207
0 s for the statement.

Sun Mar 10 16:38:47 PDT 2019 org.joda.time.Partial,208
0 s for the statement.

Sun Mar 10 16:38:47 PDT 2019 org.joda.time.Partial,202
91 s for the statement.

Sun Mar 10 16:40:18 PDT 2019 org.joda.time.Partial,199
237 s for the statement.

Sun Mar 10 16:44:16 PDT 2019 org.joda.time.Partial,196
6 s for the statement.

Sun Mar 10 16:44:22 PDT 2019 org.joda.time.field.BaseDurationField,146
46 s for the statement.

Sun Mar 10 16:45:08 PDT 2019 org.joda.time.field.BaseDurationField,147
0 s for the statement.

Sun Mar 10 16:45:08 PDT 2019 org.joda.time.field.BaseDurationField,149
0 s for the statement.

Sun Mar 10 16:45:09 PDT 2019 org.joda.time.field.BaseDurationField,152
0 s for the statement.

Sun Mar 10 16:45:09 PDT 2019 Sun Mar 10 16:45:09 PDT 2019 : org.joda.time.field.BaseDurationField,38=>Find no block
0 s for the statement.

Sun Mar 10 16:45:09 PDT 2019 org.joda.time.Partial,190
112 s for the statement.

Sun Mar 10 16:47:02 PDT 2019 org.joda.time.Partial,191
0 s for the statement.

Sun Mar 10 16:47:02 PDT 2019 org.joda.time.Partial,192
97 s for the statement.

Sun Mar 10 16:48:39 PDT 2019 org.joda.time.Partial,193
5 s for the statement.

Sun Mar 10 16:48:45 PDT 2019 org.joda.time.Partial,344
5 s for the statement.

Sun Mar 10 16:48:51 PDT 2019 org.joda.time.Partial,333
146 s for the statement.

Sun Mar 10 16:51:18 PDT 2019 org.joda.time.Partial,321
0 s for the statement.

Sun Mar 10 16:51:19 PDT 2019 org.joda.time.Partial,309
9 s for the statement.

Sun Mar 10 16:51:29 PDT 2019 org.joda.time.DurationFieldType,304
272 s for the statement.

Sun Mar 10 16:56:02 PDT 2019 org.joda.time.DateTimeFieldType,520
144 s for the statement.

Sun Mar 10 16:58:26 PDT 2019 org.joda.time.base.AbstractPartial,170
0 s for the statement.

Sun Mar 10 16:58:26 PDT 2019 org.joda.time.base.AbstractPartial,171
0 s for the statement.

Sun Mar 10 16:58:27 PDT 2019 org.joda.time.DateTimeFieldType,516
165 s for the statement.

Sun Mar 10 17:01:12 PDT 2019 org.joda.time.DurationFieldType,302
250 s for the statement.

Sun Mar 10 17:05:22 PDT 2019 org.joda.time.DurationFieldType,282
1031 s for the statement.

Sun Mar 10 17:22:34 PDT 2019 Sun Mar 10 17:22:34 PDT 2019 : org.joda.time.DurationFieldType,284=>Find no block
0 s for the statement.

Sun Mar 10 17:22:34 PDT 2019 org.joda.time.chrono.BuddhistChronology,86
0 s for the statement.

Sun Mar 10 17:22:34 PDT 2019 org.joda.time.DateTimeFieldType,480
3420 s for the statement.

Sun Mar 10 18:19:35 PDT 2019 Sun Mar 10 18:19:35 PDT 2019 : org.joda.time.DateTimeFieldType,482=>Find no block
0 s for the statement.

Sun Mar 10 18:19:35 PDT 2019 org.joda.time.field.BaseDateTimeField,818
34 s for the statement.

Sun Mar 10 18:20:09 PDT 2019 org.joda.time.field.BaseDateTimeField,804
21 s for the statement.

Sun Mar 10 18:20:31 PDT 2019 org.joda.time.chrono.BaseChronology,199
1574 s for the statement.

Sun Mar 10 18:46:45 PDT 2019 org.joda.time.chrono.BaseChronology,200
0 s for the statement.

Sun Mar 10 18:46:45 PDT 2019 org.joda.time.chrono.BaseChronology,201
0 s for the statement.

Sun Mar 10 18:46:46 PDT 2019 org.joda.time.chrono.BaseChronology,202
0 s for the statement.

Sun Mar 10 18:46:46 PDT 2019 org.joda.time.chrono.BaseChronology,207
0 s for the statement.

Sun Mar 10 18:46:46 PDT 2019 Sun Mar 10 18:46:46 PDT 2019 : org.joda.time.chrono.BaseChronology,213=>Find no block
0 s for the statement.

Sun Mar 10 18:46:46 PDT 2019 org.joda.time.chrono.BaseChronology,192
454 s for the statement.

Sun Mar 10 18:54:20 PDT 2019 org.joda.time.field.BaseDateTimeField,758
21 s for the statement.

Sun Mar 10 18:54:42 PDT 2019 org.joda.time.field.BaseDateTimeField,772
33 s for the statement.

Sun Mar 10 18:55:16 PDT 2019 org.joda.time.chrono.BaseChronology,183

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
values=new int[partial.size()];
int size=partial.size();
for(int i=0;i<size;i++){
int value=values[i];
DateTimeField field=partial.getField(i);
if(value<field.getMinimumValue()){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(field.getMinimumValue()),null);
}
if(value>field.getMaximumValue()){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),null,Integer.valueOf(field.getMaximumValue()));
}
}

Time : 19/03/10 19:12
----------------------------------------
1258 s for the statement.

Sun Mar 10 19:16:15 PDT 2019 org.joda.time.chrono.BaseChronology,184
0 s for the statement.

Sun Mar 10 19:16:15 PDT 2019 org.joda.time.chrono.BaseChronology,185
0 s for the statement.

Sun Mar 10 19:16:15 PDT 2019 org.joda.time.chrono.BaseChronology,186
0 s for the statement.

Sun Mar 10 19:16:15 PDT 2019 org.joda.time.chrono.BaseChronology,187
0 s for the statement.

Sun Mar 10 19:16:15 PDT 2019 org.joda.time.base.AbstractPartial,105
22 s for the statement.

Sun Mar 10 19:16:38 PDT 2019 org.joda.time.tz.DateTimeZoneBuilder,1544
40 s for the statement.

Sun Mar 10 19:17:18 PDT 2019 org.joda.time.tz.DateTimeZoneBuilder,1580
343 s for the statement.

Sun Mar 10 19:23:01 PDT 2019 org.joda.time.chrono.CopticChronology,89
0 s for the statement.

Sun Mar 10 19:23:02 PDT 2019 org.joda.time.chrono.BasicFixedMonthChronology,59
16 s for the statement.

Sun Mar 10 19:23:18 PDT 2019 Sun Mar 10 19:23:18 PDT 2019 : org.joda.time.chrono.BasicFixedMonthChronology,60=>Find no block
0 s for the statement.

Sun Mar 10 19:23:18 PDT 2019 org.joda.time.chrono.BasicFixedMonthChronology,101
27 s for the statement.

Sun Mar 10 19:23:45 PDT 2019 org.joda.time.chrono.BasicFixedMonthChronology,117
180 s for the statement.

Sun Mar 10 19:26:45 PDT 2019 org.joda.time.chrono.BasicFixedMonthChronology,143
0 s for the statement.

Sun Mar 10 19:26:46 PDT 2019 org.joda.time.chrono.BasicFixedMonthChronology,148
0 s for the statement.

Sun Mar 10 19:26:47 PDT 2019 org.joda.time.chrono.BasicFixedMonthChronology,158
1 s for the statement.

Sun Mar 10 19:26:48 PDT 2019 org.joda.time.chrono.LimitChronology,524
0 s for the statement.

Sun Mar 10 19:26:49 PDT 2019 org.joda.time.chrono.LimitChronology,528
1 s for the statement.

Sun Mar 10 19:26:50 PDT 2019 org.joda.time.chrono.LimitChronology,542
0 s for the statement.

Sun Mar 10 19:26:51 PDT 2019 org.joda.time.chrono.CopticChronology,161
0 s for the statement.

Sun Mar 10 19:26:51 PDT 2019 Sun Mar 10 19:26:51 PDT 2019 : org.joda.time.chrono.CopticChronology,162=>Find no block
0 s for the statement.

Sun Mar 10 19:26:51 PDT 2019 Sun Mar 10 19:26:51 PDT 2019 : org.joda.time.chrono.CopticChronology,63=>Find no block
0 s for the statement.

Sun Mar 10 19:26:51 PDT 2019 Sun Mar 10 19:26:51 PDT 2019 : org.joda.time.chrono.CopticChronology,72=>Find no block
0 s for the statement.

Sun Mar 10 19:26:51 PDT 2019 Sun Mar 10 19:26:51 PDT 2019 : org.joda.time.chrono.CopticChronology,78=>Find no block
0 s for the statement.

Sun Mar 10 19:26:52 PDT 2019 Sun Mar 10 19:26:52 PDT 2019 : org.joda.time.chrono.CopticChronology,79=>Find no block
0 s for the statement.

Sun Mar 10 19:26:52 PDT 2019 org.joda.time.chrono.CopticChronology,108
80 s for the statement.

Sun Mar 10 19:28:13 PDT 2019 org.joda.time.chrono.CopticChronology,119
45 s for the statement.

Sun Mar 10 19:28:58 PDT 2019 Sun Mar 10 19:28:58 PDT 2019 : org.joda.time.chrono.CopticChronology,123=>Find no block
0 s for the statement.

Sun Mar 10 19:28:58 PDT 2019 org.joda.time.chrono.CopticChronology,124
202 s for the statement.

Sun Mar 10 19:32:21 PDT 2019 org.joda.time.chrono.CopticChronology,125
50 s for the statement.

Sun Mar 10 19:33:12 PDT 2019 org.joda.time.chrono.CopticChronology,126
0 s for the statement.

Sun Mar 10 19:33:12 PDT 2019 org.joda.time.chrono.CopticChronology,127
0 s for the statement.

Sun Mar 10 19:33:12 PDT 2019 org.joda.time.chrono.CopticChronology,130
71 s for the statement.

Sun Mar 10 19:34:23 PDT 2019 Sun Mar 10 19:34:23 PDT 2019 : org.joda.time.chrono.CopticChronology,134=>Find no block
0 s for the statement.

Sun Mar 10 19:34:23 PDT 2019 org.joda.time.chrono.CopticChronology,135
85 s for the statement.

Sun Mar 10 19:35:49 PDT 2019 org.joda.time.chrono.CopticChronology,136
0 s for the statement.

Sun Mar 10 19:35:49 PDT 2019 org.joda.time.chrono.CopticChronology,138
0 s for the statement.

Sun Mar 10 19:35:49 PDT 2019 org.joda.time.chrono.CopticChronology,140
0 s for the statement.

Sun Mar 10 19:35:50 PDT 2019 org.joda.time.chrono.CopticChronology,141
0 s for the statement.

Sun Mar 10 19:35:50 PDT 2019 Sun Mar 10 19:35:50 PDT 2019 : org.joda.time.chrono.CopticChronology,144=>Find no block
0 s for the statement.

Sun Mar 10 19:35:50 PDT 2019 org.joda.time.chrono.CopticChronology,145
0 s for the statement.

Sun Mar 10 19:35:50 PDT 2019 org.joda.time.chrono.CopticChronology,146
0 s for the statement.

Sun Mar 10 19:35:50 PDT 2019 org.joda.time.chrono.CopticChronology,149
0 s for the statement.

Sun Mar 10 19:35:50 PDT 2019 Sun Mar 10 19:35:50 PDT 2019 : org.joda.time.chrono.CopticChronology,151=>Find no block
0 s for the statement.

Sun Mar 10 19:35:50 PDT 2019 org.joda.time.chrono.CopticChronology,152
Timeout time : 19/03/10 19:36
