06:51:21.019 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Source files: [/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/src]
06:51:21.021 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Classpath: [file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/build/classes/, file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/build/test/, file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/lib/ant.jar, file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/lib/ant-launcher.jar, file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/lib/args4j.jar, file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/lib/guava.jar, file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/lib/json.jar, file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/lib/jsr305.jar, file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/lib/junit.jar, file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/lib/caja-r4314.jar, file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/lib/protobuf-java.jar, file:/home/dehengyang/Nopol/RFANopol/nopol/target/nopol-0.2-SNAPSHOT-jar-with-dependencies.jar, file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/build/lib/rhino.jar, file:/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/lib/jarjar.jar]
06:51:21.021 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Statement type: PRE_THEN_COND
06:51:21.021 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest]
06:51:21.021 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=true, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='/home/dehengyang/Nopol/RFANopol/lib/z3/z3_for_linux', projectSources=[/home/dehengyang/environment/test/defects4j-dale/buggyPrograms/NopolRepairPrograms/Closure/Closure_14/src], projectClasspath='[Ljava.net.URL;@781fb1fb', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=6, outputFolder=., json=false}
06:51:21.022 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Available processors (cores): 8
06:51:21.024 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Free memory: 882 MB
06:51:21.024 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Maximum memory: 3 GB
06:51:21.024 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Total memory available to JVM: 957 MB
06:51:21.024 [main] INFO  fr.inria.lille.repair.nopol.NoPol - Java version: 1.7.0_80
06:51:21.025 [main] INFO  fr.inria.lille.repair.nopol.NoPol - JAVA_HOME: /home/dehengyang/environment/jdk1.7.0_80
06:51:21.025 [main] INFO  fr.inria.lille.repair.nopol.NoPol - PATH: /home/dehengyang/environment/apache-maven-3.3.9/bin:/home/dehengyang/environment/jdk1.7.0_80/bin:/home/dehengyang/environment/apache-maven-3.3.9/bin:/home/dehengyang/environment/jdk1.7.0_80/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/dehengyang/environment/test/defects4j-dale/defects4j/framework/bin:/home/dehengyang/environment/apache-ant-1.9.9/bin:/home/dehengyang/environment/test/defects4j-dale/defects4j/framework/bin:/home/dehengyang/environment/apache-ant-1.9.9/bin
06:52:23.752 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:768 which is executed by 14 tests
06:52:25.007 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:767 which is executed by 14 tests
06:52:26.555 [pool-3-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:767
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:26.555 [pool-3-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:26.555 [pool-3-thread-1] DEBUG tests.output - Second set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:26.556 [pool-3-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Changing only this statement does not solve the bug. SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:767
patchCnt+tmpPatches.size() is : 0  0
06:52:26.556 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:491 which is executed by 26 tests
06:52:27.395 [pool-11-thread-1] DEBUG x.java.compiler.DynamicClassCompiler - [Compilation errors]
ControlFlowAnalysis.java:171: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:176: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:202: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:207: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:233: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:238: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:264: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:269: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:295: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:300: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:326: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:331: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:358: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:363: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:389: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:394: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:420: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:425: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:451: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:456: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:482: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:487: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:513: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:518: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:544: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:549: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:575: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:580: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:606: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:611: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:637: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:642: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:667: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:672: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
ControlFlowAnalysis.java:698: error: variable spoonDefaultValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean spoonDefaultValue = false;
                                  ^
ControlFlowAnalysis.java:703: error: variable runtimeAngelicValue is already defined in method visit(com.google.javascript.jscomp.NodeTraversal,com.google.javascript.rhino.Node,com.google.javascript.rhino.Node)
                java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                  ^
06:52:27.430 [pool-11-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
final class ControlFlowAnalysis implements com.google.javascript.jscomp.CompilerPass , com.google.javascript.jscomp.NodeTraversal.Callback {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg;

    private java.util.Map<com.google.javascript.rhino.Node, java.lang.Integer> astPosition;

    private java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> nodePriorities;

    private final java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> priorityComparator = new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
        @java.lang.Override
        public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> a, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> b) {
            return (astPosition.get(a.getValue())) - (astPosition.get(b.getValue()));
        }
    };

    private int astPositionCounter;

    private int priorityCounter;

    private final boolean shouldTraverseFunctions;

    private final boolean edgeAnnotations;

    private com.google.javascript.rhino.Node root;

    private final java.util.Deque<com.google.javascript.rhino.Node> exceptionHandler = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> finallyMap = com.google.common.collect.HashMultimap.create();

    ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler compiler, boolean shouldTraverseFunctions, boolean edgeAnnotations) {
        this.compiler = compiler;
        this.shouldTraverseFunctions = shouldTraverseFunctions;
        this.edgeAnnotations = edgeAnnotations;
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getCfg() {
        return cfg;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        this.root = root;
        astPositionCounter = 0;
        astPosition = com.google.common.collect.Maps.newHashMap();
        nodePriorities = com.google.common.collect.Maps.newHashMap();
        cfg = new com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph(com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(root), nodePriorities, edgeAnnotations);
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, this);
        astPosition.put(null, (++(astPositionCounter)));
        priorityCounter = 0;
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry = cfg.getEntry();
        prioritizeFromEntryNode(entry);
        if (shouldTraverseFunctions) {
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
                com.google.javascript.rhino.Node value = candidate.getValue();
                if ((value != null) && (value.isFunction())) {
                    com.google.common.base.Preconditions.checkState(((!(nodePriorities.containsKey(candidate))) || (candidate == entry)));
                    prioritizeFromEntryNode(candidate);
                }
            }
        }
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
            if (!(nodePriorities.containsKey(candidate))) {
                nodePriorities.put(candidate, (++(priorityCounter)));
            }
        }
        nodePriorities.put(cfg.getImplicitReturn(), (++(priorityCounter)));
    }

    private void prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry) {
        java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> worklist = new java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>(10, priorityComparator);
        worklist.add(entry);
        while (!(worklist.isEmpty())) {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> current = worklist.remove();
            if (nodePriorities.containsKey(current)) {
                continue;
            }
            nodePriorities.put(current, (++(priorityCounter)));
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> successors = cfg.getDirectedSuccNodes(current);
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : successors) {
                worklist.add(candidate);
            }
        } 
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        astPosition.put(n, ((astPositionCounter)++));
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                if ((shouldTraverseFunctions) || (n == (cfg.getEntry().getValue()))) {
                    exceptionHandler.push(n);
                    return true;
                }
                return false;
            case com.google.javascript.rhino.Token.TRY :
                exceptionHandler.push(n);
                return true;
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.FOR :
                    return n == (parent.getLastChild());
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return n != (parent.getFirstChild());
                case com.google.javascript.rhino.Token.DO :
                    return n != (parent.getFirstChild().getNext());
                case com.google.javascript.rhino.Token.SWITCH :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.CATCH :
                case com.google.javascript.rhino.Token.LABEL :
                    return n != (parent.getFirstChild());
                case com.google.javascript.rhino.Token.FUNCTION :
                    return n == (parent.getFirstChild().getNext().getNext());
                case com.google.javascript.rhino.Token.CONTINUE :
                case com.google.javascript.rhino.Token.BREAK :
                case com.google.javascript.rhino.Token.EXPR_RESULT :
                case com.google.javascript.rhino.Token.VAR :
                case com.google.javascript.rhino.Token.RETURN :
                case com.google.javascript.rhino.Token.THROW :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if (n == (parent.getFirstChild().getNext())) {
                        com.google.common.base.Preconditions.checkState(((exceptionHandler.peek()) == parent));
                        exceptionHandler.pop();
                    }
            }
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
                handleIf(n);
                return ;
            case com.google.javascript.rhino.Token.WHILE :
                handleWhile(n);
                return ;
            case com.google.javascript.rhino.Token.DO :
                handleDo(n);
                return ;
            case com.google.javascript.rhino.Token.FOR :
                handleFor(n);
                return ;
            case com.google.javascript.rhino.Token.SWITCH :
                handleSwitch(n);
                return ;
            case com.google.javascript.rhino.Token.CASE :
                handleCase(n);
                return ;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                handleDefault(n);
                return ;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.SCRIPT :
                handleStmtList(n);
                return ;
            case com.google.javascript.rhino.Token.FUNCTION :
                handleFunction(n);
                return ;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                handleExpr(n);
                return ;
            case com.google.javascript.rhino.Token.THROW :
                handleThrow(n);
                return ;
            case com.google.javascript.rhino.Token.TRY :
                handleTry(n);
                return ;
            case com.google.javascript.rhino.Token.CATCH :
                handleCatch(n);
                return ;
            case com.google.javascript.rhino.Token.BREAK :
                handleBreak(n);
                return ;
            case com.google.javascript.rhino.Token.CONTINUE :
                handleContinue(n);
                return ;
            case com.google.javascript.rhino.Token.RETURN :
                handleReturn(n);
                return ;
            case com.google.javascript.rhino.Token.WITH :
                handleWith(n);
                return ;
            case com.google.javascript.rhino.Token.LABEL :
                return ;
            default :
                handleStmt(n);
                return ;
        }
    }

    private void handleIf(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node thenBlock = node.getFirstChild().getNext();
        com.google.javascript.rhino.Node elseBlock = thenBlock.getNext();
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(thenBlock));
        if (elseBlock == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(elseBlock));
        }
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleWhile(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleDo(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleFor(com.google.javascript.rhino.Node forNode) {
        if ((forNode.getChildCount()) == 4) {
            com.google.javascript.rhino.Node init = forNode.getFirstChild();
            com.google.javascript.rhino.Node cond = init.getNext();
            com.google.javascript.rhino.Node iter = cond.getNext();
            com.google.javascript.rhino.Node body = iter.getNext();
            createEdge(init, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            createEdge(iter, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            connectToPossibleExceptionHandler(init, init);
            connectToPossibleExceptionHandler(forNode, cond);
            connectToPossibleExceptionHandler(iter, iter);
        }else {
            com.google.javascript.rhino.Node item = forNode.getFirstChild();
            com.google.javascript.rhino.Node collection = item.getNext();
            com.google.javascript.rhino.Node body = collection.getNext();
            createEdge(collection, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            connectToPossibleExceptionHandler(forNode, collection);
        }
    }

    private void handleSwitch(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getFirstChild().getNext(), com.google.javascript.rhino.Token.CASE, com.google.javascript.rhino.Token.EMPTY);
        if (next != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, next);
        }else {
            if ((node.getFirstChild().getNext()) != null) {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild().getNext());
            }else {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
            }
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleCase(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, node.getFirstChild().getNext());
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getNext(), com.google.javascript.rhino.Token.CASE);
        if (next != null) {
            com.google.common.base.Preconditions.checkState(next.isCase());
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, next);
        }else {
            com.google.javascript.rhino.Node parent = node.getParent();
            com.google.javascript.rhino.Node deflt = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(parent.getFirstChild().getNext(), com.google.javascript.rhino.Token.DEFAULT_CASE);
            if (deflt != null) {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, deflt);
            }else {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
            }
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleDefault(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleWith(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleStmtList(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if (((((node.isBlock()) && (parent != null)) && (parent.isTry())) && ((com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent)) == node)) && (!(com.google.javascript.jscomp.NodeUtil.hasCatchHandler(node)))) {
            return ;
        }
        com.google.javascript.rhino.Node child = node.getFirstChild();
        while ((child != null) && (child.isFunction())) {
            child = child.getNext();
        } 
        if (child != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(child));
        }else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.TRY :
                    break;
                default :
                    if ((node.isBlock()) && (node.isSyntheticBlock())) {
                        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.SYN_BLOCK, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
                    }
                    break;
            }
        }
    }

    private void handleFunction(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(((node.getChildCount()) >= 3));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext().getNext()));
        com.google.common.base.Preconditions.checkState(((exceptionHandler.peek()) == node));
        exceptionHandler.pop();
    }

    private void handleExpr(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleThrow(com.google.javascript.rhino.Node node) {
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleTry(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleCatch(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
    }

    private void handleBreak(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !(com.google.javascript.jscomp.ControlFlowAnalysis.isBreakTarget(cur, label)); cur = parent , parent = parent.getParent()) {
            if (((cur.isTry()) && (com.google.javascript.jscomp.NodeUtil.hasFinally(cur))) && ((cur.getLastChild()) != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            if (parent == null) {
                if (compiler.isIdeMode()) {
                    return ;
                }else {
                    throw new java.lang.IllegalStateException("Cannot find break target.");
                }
            }
            previous = cur;
        }
        if (lastJump == node) {
            createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        }else {
            finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        }
    }

    private void handleContinue(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !(com.google.javascript.jscomp.ControlFlowAnalysis.isContinueTarget(cur, parent, label)); cur = parent , parent = parent.getParent()) {
            if (((cur.isTry()) && (com.google.javascript.jscomp.NodeUtil.hasFinally(cur))) && ((cur.getLastChild()) != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, cur.getLastChild());
                }else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            com.google.common.base.Preconditions.checkState((parent != null), "Cannot find continue target.");
            previous = cur;
        }
        com.google.javascript.rhino.Node iter = cur;
        if ((cur.getChildCount()) == 4) {
            iter = cur.getFirstChild().getNext().getNext();
        }
        if (lastJump == node) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, iter);
        }else {
            finallyMap.put(lastJump, iter);
        }
    }

    private void handleReturn(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node lastJump = null;
        for (java.util.Iterator<com.google.javascript.rhino.Node> iter = exceptionHandler.iterator(); iter.hasNext();) {
            com.google.javascript.rhino.Node curHandler = iter.next();
            if (curHandler.isFunction()) {
                break;
            }
            if (com.google.javascript.jscomp.NodeUtil.hasFinally(curHandler)) {
                if (lastJump == null) {
                    createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, curHandler.getLastChild());
                }else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(curHandler.getLastChild()));
                }
                lastJump = curHandler;
            }
        }
        if (node.hasChildren()) {
            connectToPossibleExceptionHandler(node, node.getFirstChild());
        }
        if (lastJump == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, null);
        }else {
            finallyMap.put(lastJump, null);
        }
    }

    private void handleStmt(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, cfa);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, null);
    }

    private static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node fromNode, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if (((parent == null) || (parent.isFunction())) || ((cfa != null) && (node == (cfa.root)))) {
            return null;
        }
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.IF :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                if ((parent.getNext()) != null) {
                    if (parent.getNext().isCase()) {
                        return parent.getNext().getFirstChild().getNext();
                    }else
                        if (parent.getNext().isDefaultCase()) {
                            return parent.getNext().getFirstChild();
                        }else {
                            com.google.common.base.Preconditions.checkState(false, "Not reachable");
                        }
                    
                }else {
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent;
                }else {
                    return parent.getFirstChild().getNext().getNext();
                }
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
                return parent;
            case com.google.javascript.rhino.Token.TRY :
                if ((parent.getFirstChild()) == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(parent.getLastChild());
                    }else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                }else
                    if ((com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent)) == node) {
                        if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getNext());
                        }else {
                            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                        }
                    }else
                        if ((parent.getLastChild()) == node) {
                            if (cfa != null) {
                                for (com.google.javascript.rhino.Node finallyNode : cfa.finallyMap.get(parent)) {
                                    cfa.createEdge(fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, finallyNode);
                                }
                            }
                            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                        }
                    
                
        }
        com.google.javascript.rhino.Node nextSibling = node.getNext();
        while ((nextSibling != null) && (nextSibling.isFunction())) {
            nextSibling = nextSibling.getNext();
        } 
        if (nextSibling != null) {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(nextSibling);
        }else {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
        }
    }

    static com.google.javascript.rhino.Node computeFallThrough(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DO :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    return n.getFirstChild().getNext();
                }
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.LABEL :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getLastChild());
            default :
                return n;
        }
    }

    private void createEdge(com.google.javascript.rhino.Node fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch branch, com.google.javascript.rhino.Node toNode) {
        cfg.createNode(fromNode);
        cfg.createNode(toNode);
        cfg.connectIfNotFound(fromNode, branch, toNode);
    }

    private void connectToPossibleExceptionHandler(com.google.javascript.rhino.Node cfgNode, com.google.javascript.rhino.Node target) {
        if ((com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(target)) && (!(exceptionHandler.isEmpty()))) {
            com.google.javascript.rhino.Node lastJump = cfgNode;
            for (com.google.javascript.rhino.Node handler : exceptionHandler) {
                if (handler.isFunction()) {
                    return ;
                }
                com.google.common.base.Preconditions.checkState(handler.isTry());
                com.google.javascript.rhino.Node catchBlock = com.google.javascript.jscomp.NodeUtil.getCatchBlock(handler);
                if (!(com.google.javascript.jscomp.NodeUtil.hasCatchHandler(catchBlock))) {
                    if (lastJump == cfgNode) {
                        createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, handler.getLastChild());
                    }else {
                        finallyMap.put(lastJump, handler.getLastChild());
                    }
                }else {
                    if (lastJump == cfgNode) {
                        createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, catchBlock);
                        return ;
                    }else {
                        finallyMap.put(lastJump, catchBlock);
                    }
                }
                lastJump = handler;
            }
        }
    }

    private static com.google.javascript.rhino.Node getNextSiblingOfType(com.google.javascript.rhino.Node first, int... types) {
        for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
            for (int type : types) {
                if ((c.getType()) == type) {
                    return c;
                }
            }
        }
        return null;
    }

    public static boolean isBreakTarget(com.google.javascript.rhino.Node target, java.lang.String label) {
        return (com.google.javascript.jscomp.ControlFlowAnalysis.isBreakStructure(target, (label != null))) && (com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(target.getParent(), label));
    }

    private static boolean isContinueTarget(com.google.javascript.rhino.Node target, com.google.javascript.rhino.Node parent, java.lang.String label) {
        return (com.google.javascript.jscomp.ControlFlowAnalysis.isContinueStructure(target)) && (com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(parent, label));
    }

    private static boolean matchLabel(com.google.javascript.rhino.Node target, java.lang.String label) {
        if (label == null) {
            return true;
        }
        while (target.isLabel()) {
            if (target.getFirstChild().getString().equals(label)) {
                return true;
            }
            target = target.getParent();
        } 
        return false;
    }

    public static boolean mayThrowException(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if ((!(com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(c))) && (com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(c))) {
                return true;
            }
        }
        return false;
    }

    static boolean isBreakStructure(com.google.javascript.rhino.Node n, boolean labeled) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.SWITCH :
                return true;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.TRY :
                return labeled;
            default :
                return false;
        }
    }

    static boolean isContinueStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getExceptionHandler(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node cur = n; (!(cur.isScript())) && (!(cur.isFunction())); cur = cur.getParent()) {
            com.google.javascript.rhino.Node catchNode = com.google.javascript.jscomp.ControlFlowAnalysis.getCatchHandlerForBlock(cur);
            if (catchNode != null) {
                return catchNode;
            }
        }
        return null;
    }

    static com.google.javascript.rhino.Node getCatchHandlerForBlock(com.google.javascript.rhino.Node block) {
        if (((block.isBlock()) && (block.getParent().isTry())) && ((block.getParent().getFirstChild()) == block)) {
            for (com.google.javascript.rhino.Node s = block.getNext(); s != null; s = s.getNext()) {
                if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(s)) {
                    return s.getFirstChild();
                }
            }
        }
        return null;
    }

    private static class AstControlFlowGraph extends com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> {
        private final java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities;

        private AstControlFlowGraph(com.google.javascript.rhino.Node entry, java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities, boolean edgeAnnotations) {
            super(entry, true, edgeAnnotations);
            this.priorities = priorities;
        }

        @java.lang.Override
        public java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> getOptionalNodeComparator(boolean isForward) {
            if (isForward) {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return (getPosition(n1)) - (getPosition(n2));
                    }
                };
            }else {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return (getPosition(n2)) - (getPosition(n1));
                    }
                };
            }
        }

        private int getPosition(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n) {
            java.lang.Integer priority = priorities.get(n);
            com.google.common.base.Preconditions.checkNotNull(priority);
            return priority;
        }
    }
}
06:52:27.431 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:766 which is executed by 28 tests
06:52:28.708 [pool-12-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:766
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:28.709 [pool-12-thread-1] DEBUG tests.output - First set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:28.709 [pool-12-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:28.709 [pool-12-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Changing only this statement does not solve the bug. SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:766
patchCnt+tmpPatches.size() is : 0  0
06:52:28.709 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:770 which is executed by 33 tests
06:52:29.258 [pool-20-thread-1] DEBUG x.java.compiler.DynamicClassCompiler - [Compilation errors]
ControlFlowAnalysis.java:495: error: variable spoonDefaultValue is already defined in method computeFollowNode(com.google.javascript.rhino.Node,com.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowAnalysis)
                    java.lang.Boolean spoonDefaultValue = false;
                                      ^
ControlFlowAnalysis.java:500: error: variable runtimeAngelicValue is already defined in method computeFollowNode(com.google.javascript.rhino.Node,com.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowAnalysis)
                    java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                      ^
ControlFlowAnalysis.java:541: error: variable spoonDefaultValue is already defined in method computeFollowNode(com.google.javascript.rhino.Node,com.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowAnalysis)
                        java.lang.Boolean spoonDefaultValue = false;
                                          ^
ControlFlowAnalysis.java:546: error: variable runtimeAngelicValue is already defined in method computeFollowNode(com.google.javascript.rhino.Node,com.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowAnalysis)
                        java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                          ^
ControlFlowAnalysis.java:577: error: variable spoonDefaultValue is already defined in method computeFollowNode(com.google.javascript.rhino.Node,com.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowAnalysis)
                            java.lang.Boolean spoonDefaultValue = false;
                                              ^
ControlFlowAnalysis.java:582: error: variable runtimeAngelicValue is already defined in method computeFollowNode(com.google.javascript.rhino.Node,com.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowAnalysis)
                            java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                              ^
ControlFlowAnalysis.java:615: error: variable spoonDefaultValue is already defined in method computeFollowNode(com.google.javascript.rhino.Node,com.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowAnalysis)
                            java.lang.Boolean spoonDefaultValue = false;
                                              ^
ControlFlowAnalysis.java:620: error: variable runtimeAngelicValue is already defined in method computeFollowNode(com.google.javascript.rhino.Node,com.google.javascript.rhino.Node,com.google.javascript.jscomp.ControlFlowAnalysis)
                            java.lang.Boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                                              ^
06:52:29.293 [pool-20-thread-1] ERROR f.i.l.r.n.s.ConstraintModelBuilder - Unable to compile the change: 
final class ControlFlowAnalysis implements com.google.javascript.jscomp.CompilerPass , com.google.javascript.jscomp.NodeTraversal.Callback {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg;

    private java.util.Map<com.google.javascript.rhino.Node, java.lang.Integer> astPosition;

    private java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> nodePriorities;

    private final java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> priorityComparator = new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
        @java.lang.Override
        public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> a, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> b) {
            return (astPosition.get(a.getValue())) - (astPosition.get(b.getValue()));
        }
    };

    private int astPositionCounter;

    private int priorityCounter;

    private final boolean shouldTraverseFunctions;

    private final boolean edgeAnnotations;

    private com.google.javascript.rhino.Node root;

    private final java.util.Deque<com.google.javascript.rhino.Node> exceptionHandler = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    private final com.google.common.collect.Multimap<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> finallyMap = com.google.common.collect.HashMultimap.create();

    ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler compiler, boolean shouldTraverseFunctions, boolean edgeAnnotations) {
        this.compiler = compiler;
        this.shouldTraverseFunctions = shouldTraverseFunctions;
        this.edgeAnnotations = edgeAnnotations;
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getCfg() {
        return cfg;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        this.root = root;
        astPositionCounter = 0;
        astPosition = com.google.common.collect.Maps.newHashMap();
        nodePriorities = com.google.common.collect.Maps.newHashMap();
        cfg = new com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph(com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(root), nodePriorities, edgeAnnotations);
        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, this);
        astPosition.put(null, (++(astPositionCounter)));
        priorityCounter = 0;
        com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry = cfg.getEntry();
        prioritizeFromEntryNode(entry);
        if (shouldTraverseFunctions) {
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
                com.google.javascript.rhino.Node value = candidate.getValue();
                if ((value != null) && (value.isFunction())) {
                    com.google.common.base.Preconditions.checkState(((!(nodePriorities.containsKey(candidate))) || (candidate == entry)));
                    prioritizeFromEntryNode(candidate);
                }
            }
        }
        for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : cfg.getDirectedGraphNodes()) {
            if (!(nodePriorities.containsKey(candidate))) {
                nodePriorities.put(candidate, (++(priorityCounter)));
            }
        }
        nodePriorities.put(cfg.getImplicitReturn(), (++(priorityCounter)));
    }

    private void prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> entry) {
        java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> worklist = new java.util.PriorityQueue<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>(10, priorityComparator);
        worklist.add(entry);
        while (!(worklist.isEmpty())) {
            com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> current = worklist.remove();
            if (nodePriorities.containsKey(current)) {
                continue;
            }
            nodePriorities.put(current, (++(priorityCounter)));
            java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> successors = cfg.getDirectedSuccNodes(current);
            for (com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> candidate : successors) {
                worklist.add(candidate);
            }
        } 
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        astPosition.put(n, ((astPositionCounter)++));
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                if ((shouldTraverseFunctions) || (n == (cfg.getEntry().getValue()))) {
                    exceptionHandler.push(n);
                    return true;
                }
                return false;
            case com.google.javascript.rhino.Token.TRY :
                exceptionHandler.push(n);
                return true;
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.FOR :
                    return n == (parent.getLastChild());
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.WITH :
                    return n != (parent.getFirstChild());
                case com.google.javascript.rhino.Token.DO :
                    return n != (parent.getFirstChild().getNext());
                case com.google.javascript.rhino.Token.SWITCH :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.CATCH :
                case com.google.javascript.rhino.Token.LABEL :
                    return n != (parent.getFirstChild());
                case com.google.javascript.rhino.Token.FUNCTION :
                    return n == (parent.getFirstChild().getNext().getNext());
                case com.google.javascript.rhino.Token.CONTINUE :
                case com.google.javascript.rhino.Token.BREAK :
                case com.google.javascript.rhino.Token.EXPR_RESULT :
                case com.google.javascript.rhino.Token.VAR :
                case com.google.javascript.rhino.Token.RETURN :
                case com.google.javascript.rhino.Token.THROW :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if (n == (parent.getFirstChild().getNext())) {
                        com.google.common.base.Preconditions.checkState(((exceptionHandler.peek()) == parent));
                        exceptionHandler.pop();
                    }
            }
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
                handleIf(n);
                return ;
            case com.google.javascript.rhino.Token.WHILE :
                handleWhile(n);
                return ;
            case com.google.javascript.rhino.Token.DO :
                handleDo(n);
                return ;
            case com.google.javascript.rhino.Token.FOR :
                handleFor(n);
                return ;
            case com.google.javascript.rhino.Token.SWITCH :
                handleSwitch(n);
                return ;
            case com.google.javascript.rhino.Token.CASE :
                handleCase(n);
                return ;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                handleDefault(n);
                return ;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.SCRIPT :
                handleStmtList(n);
                return ;
            case com.google.javascript.rhino.Token.FUNCTION :
                handleFunction(n);
                return ;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                handleExpr(n);
                return ;
            case com.google.javascript.rhino.Token.THROW :
                handleThrow(n);
                return ;
            case com.google.javascript.rhino.Token.TRY :
                handleTry(n);
                return ;
            case com.google.javascript.rhino.Token.CATCH :
                handleCatch(n);
                return ;
            case com.google.javascript.rhino.Token.BREAK :
                handleBreak(n);
                return ;
            case com.google.javascript.rhino.Token.CONTINUE :
                handleContinue(n);
                return ;
            case com.google.javascript.rhino.Token.RETURN :
                handleReturn(n);
                return ;
            case com.google.javascript.rhino.Token.WITH :
                handleWith(n);
                return ;
            case com.google.javascript.rhino.Token.LABEL :
                return ;
            default :
                handleStmt(n);
                return ;
        }
    }

    private void handleIf(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node thenBlock = node.getFirstChild().getNext();
        com.google.javascript.rhino.Node elseBlock = thenBlock.getNext();
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(thenBlock));
        if (elseBlock == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(elseBlock));
        }
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleWhile(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleDo(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild()));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, com.google.javascript.jscomp.NodeUtil.getConditionExpression(node));
    }

    private void handleFor(com.google.javascript.rhino.Node forNode) {
        if ((forNode.getChildCount()) == 4) {
            com.google.javascript.rhino.Node init = forNode.getFirstChild();
            com.google.javascript.rhino.Node cond = init.getNext();
            com.google.javascript.rhino.Node iter = cond.getNext();
            com.google.javascript.rhino.Node body = iter.getNext();
            createEdge(init, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            createEdge(iter, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            connectToPossibleExceptionHandler(init, init);
            connectToPossibleExceptionHandler(forNode, cond);
            connectToPossibleExceptionHandler(iter, iter);
        }else {
            com.google.javascript.rhino.Node item = forNode.getFirstChild();
            com.google.javascript.rhino.Node collection = item.getNext();
            com.google.javascript.rhino.Node body = collection.getNext();
            createEdge(collection, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, forNode);
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(body));
            createEdge(forNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(forNode, this));
            connectToPossibleExceptionHandler(forNode, collection);
        }
    }

    private void handleSwitch(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getFirstChild().getNext(), com.google.javascript.rhino.Token.CASE, com.google.javascript.rhino.Token.EMPTY);
        if (next != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, next);
        }else {
            if ((node.getFirstChild().getNext()) != null) {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild().getNext());
            }else {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
            }
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleCase(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_TRUE, node.getFirstChild().getNext());
        com.google.javascript.rhino.Node next = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(node.getNext(), com.google.javascript.rhino.Token.CASE);
        if (next != null) {
            com.google.common.base.Preconditions.checkState(next.isCase());
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, next);
        }else {
            com.google.javascript.rhino.Node parent = node.getParent();
            com.google.javascript.rhino.Node deflt = com.google.javascript.jscomp.ControlFlowAnalysis.getNextSiblingOfType(parent.getFirstChild().getNext(), com.google.javascript.rhino.Token.DEFAULT_CASE);
            if (deflt != null) {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, deflt);
            }else {
                createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_FALSE, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
            }
        }
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleDefault(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleWith(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
        connectToPossibleExceptionHandler(node, node.getFirstChild());
    }

    private void handleStmtList(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if (((((node.isBlock()) && (parent != null)) && (parent.isTry())) && ((com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent)) == node)) && (!(com.google.javascript.jscomp.NodeUtil.hasCatchHandler(node)))) {
            return ;
        }
        com.google.javascript.rhino.Node child = node.getFirstChild();
        while ((child != null) && (child.isFunction())) {
            child = child.getNext();
        } 
        if (child != null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(child));
        }else {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        }
        if (parent != null) {
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.TRY :
                    break;
                default :
                    if ((node.isBlock()) && (node.isSyntheticBlock())) {
                        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.SYN_BLOCK, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
                    }
                    break;
            }
        }
    }

    private void handleFunction(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(((node.getChildCount()) >= 3));
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getFirstChild().getNext().getNext()));
        com.google.common.base.Preconditions.checkState(((exceptionHandler.peek()) == node));
        exceptionHandler.pop();
    }

    private void handleExpr(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleThrow(com.google.javascript.rhino.Node node) {
        connectToPossibleExceptionHandler(node, node);
    }

    private void handleTry(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getFirstChild());
    }

    private void handleCatch(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, node.getLastChild());
    }

    private void handleBreak(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !(com.google.javascript.jscomp.ControlFlowAnalysis.isBreakTarget(cur, label)); cur = parent , parent = parent.getParent()) {
            if (((cur.isTry()) && (com.google.javascript.jscomp.NodeUtil.hasFinally(cur))) && ((cur.getLastChild()) != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            if (parent == null) {
                if (compiler.isIdeMode()) {
                    return ;
                }else {
                    throw new java.lang.IllegalStateException("Cannot find break target.");
                }
            }
            previous = cur;
        }
        if (lastJump == node) {
            createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        }else {
            finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(cur, this));
        }
    }

    private void handleContinue(com.google.javascript.rhino.Node node) {
        java.lang.String label = null;
        if (node.hasChildren()) {
            label = node.getFirstChild().getString();
        }
        com.google.javascript.rhino.Node cur;
        com.google.javascript.rhino.Node previous = null;
        com.google.javascript.rhino.Node lastJump;
        com.google.javascript.rhino.Node parent = node.getParent();
        for (cur = node, lastJump = node; !(com.google.javascript.jscomp.ControlFlowAnalysis.isContinueTarget(cur, parent, label)); cur = parent , parent = parent.getParent()) {
            if (((cur.isTry()) && (com.google.javascript.jscomp.NodeUtil.hasFinally(cur))) && ((cur.getLastChild()) != previous)) {
                if (lastJump == node) {
                    createEdge(lastJump, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, cur.getLastChild());
                }else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(cur.getLastChild()));
                }
                lastJump = cur;
            }
            com.google.common.base.Preconditions.checkState((parent != null), "Cannot find continue target.");
            previous = cur;
        }
        com.google.javascript.rhino.Node iter = cur;
        if ((cur.getChildCount()) == 4) {
            iter = cur.getFirstChild().getNext().getNext();
        }
        if (lastJump == node) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, iter);
        }else {
            finallyMap.put(lastJump, iter);
        }
    }

    private void handleReturn(com.google.javascript.rhino.Node node) {
        com.google.javascript.rhino.Node lastJump = null;
        for (java.util.Iterator<com.google.javascript.rhino.Node> iter = exceptionHandler.iterator(); iter.hasNext();) {
            com.google.javascript.rhino.Node curHandler = iter.next();
            if (curHandler.isFunction()) {
                break;
            }
            if (com.google.javascript.jscomp.NodeUtil.hasFinally(curHandler)) {
                if (lastJump == null) {
                    createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, curHandler.getLastChild());
                }else {
                    finallyMap.put(lastJump, com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(curHandler.getLastChild()));
                }
                lastJump = curHandler;
            }
        }
        if (node.hasChildren()) {
            connectToPossibleExceptionHandler(node, node.getFirstChild());
        }
        if (lastJump == null) {
            createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, null);
        }else {
            finallyMap.put(lastJump, null);
        }
    }

    private void handleStmt(com.google.javascript.rhino.Node node) {
        createEdge(node, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, this));
        connectToPossibleExceptionHandler(node, node);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, cfa);
    }

    static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(node, node, null);
    }

    private static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node fromNode, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.ControlFlowAnalysis cfa) {
        com.google.javascript.rhino.Node parent = node.getParent();
        if (((parent == null) || (parent.isFunction())) || ((cfa != null) && (node == (cfa.root)))) {
            return null;
        }
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.IF :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                if ((parent.getNext()) != null) {
                    if (parent.getNext().isCase()) {
                        return parent.getNext().getFirstChild().getNext();
                    }else
                        if (parent.getNext().isDefaultCase()) {
                            return parent.getNext().getFirstChild();
                        }else {
                            com.google.common.base.Preconditions.checkState(false, "Not reachable");
                        }
                    
                }else {
                    return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                }
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent;
                }else {
                    return parent.getFirstChild().getNext().getNext();
                }
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
                return parent;
            case com.google.javascript.rhino.Token.TRY :
                if ((parent.getFirstChild()) == node) {
                    if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(parent.getLastChild());
                    }else {
                        return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                    }
                }else
                    if ((com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent)) == node) {
                        if (com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) {
                            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(node.getNext());
                        }else {
                            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                        }
                    }else
                        if ((parent.getLastChild()) == node) {
                            if (cfa != null) {
                                for (com.google.javascript.rhino.Node finallyNode : cfa.finallyMap.get(parent)) {
                                    cfa.createEdge(fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.UNCOND, finallyNode);
                                }
                            }
                            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
                        }
                    
                
        }
        com.google.javascript.rhino.Node nextSibling = node.getNext();
        while ((nextSibling != null) && (nextSibling.isFunction())) {
            nextSibling = nextSibling.getNext();
        } 
        if (nextSibling != null) {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(nextSibling);
        }else {
            return com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(fromNode, parent, cfa);
        }
    }

    static com.google.javascript.rhino.Node computeFallThrough(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DO :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    return n.getFirstChild().getNext();
                }
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getFirstChild());
            case com.google.javascript.rhino.Token.LABEL :
                return com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(n.getLastChild());
            default :
                return n;
        }
    }

    private void createEdge(com.google.javascript.rhino.Node fromNode, com.google.javascript.jscomp.ControlFlowGraph.Branch branch, com.google.javascript.rhino.Node toNode) {
        cfg.createNode(fromNode);
        cfg.createNode(toNode);
        cfg.connectIfNotFound(fromNode, branch, toNode);
    }

    private void connectToPossibleExceptionHandler(com.google.javascript.rhino.Node cfgNode, com.google.javascript.rhino.Node target) {
        if ((com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(target)) && (!(exceptionHandler.isEmpty()))) {
            com.google.javascript.rhino.Node lastJump = cfgNode;
            for (com.google.javascript.rhino.Node handler : exceptionHandler) {
                if (handler.isFunction()) {
                    return ;
                }
                com.google.common.base.Preconditions.checkState(handler.isTry());
                com.google.javascript.rhino.Node catchBlock = com.google.javascript.jscomp.NodeUtil.getCatchBlock(handler);
                if (!(com.google.javascript.jscomp.NodeUtil.hasCatchHandler(catchBlock))) {
                    if (lastJump == cfgNode) {
                        createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, handler.getLastChild());
                    }else {
                        finallyMap.put(lastJump, handler.getLastChild());
                    }
                }else {
                    if (lastJump == cfgNode) {
                        createEdge(cfgNode, com.google.javascript.jscomp.ControlFlowGraph.Branch.ON_EX, catchBlock);
                        return ;
                    }else {
                        finallyMap.put(lastJump, catchBlock);
                    }
                }
                lastJump = handler;
            }
        }
    }

    private static com.google.javascript.rhino.Node getNextSiblingOfType(com.google.javascript.rhino.Node first, int... types) {
        for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
            for (int type : types) {
                if ((c.getType()) == type) {
                    return c;
                }
            }
        }
        return null;
    }

    public static boolean isBreakTarget(com.google.javascript.rhino.Node target, java.lang.String label) {
        return (com.google.javascript.jscomp.ControlFlowAnalysis.isBreakStructure(target, (label != null))) && (com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(target.getParent(), label));
    }

    private static boolean isContinueTarget(com.google.javascript.rhino.Node target, com.google.javascript.rhino.Node parent, java.lang.String label) {
        return (com.google.javascript.jscomp.ControlFlowAnalysis.isContinueStructure(target)) && (com.google.javascript.jscomp.ControlFlowAnalysis.matchLabel(parent, label));
    }

    private static boolean matchLabel(com.google.javascript.rhino.Node target, java.lang.String label) {
        if (label == null) {
            return true;
        }
        while (target.isLabel()) {
            if (target.getFirstChild().getString().equals(label)) {
                return true;
            }
            target = target.getParent();
        } 
        return false;
    }

    public static boolean mayThrowException(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.THROW :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if ((!(com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(c))) && (com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(c))) {
                return true;
            }
        }
        return false;
    }

    static boolean isBreakStructure(com.google.javascript.rhino.Node n, boolean labeled) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.SWITCH :
                return true;
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.TRY :
                return labeled;
            default :
                return false;
        }
    }

    static boolean isContinueStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getExceptionHandler(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node cur = n; (!(cur.isScript())) && (!(cur.isFunction())); cur = cur.getParent()) {
            com.google.javascript.rhino.Node catchNode = com.google.javascript.jscomp.ControlFlowAnalysis.getCatchHandlerForBlock(cur);
            if (catchNode != null) {
                return catchNode;
            }
        }
        return null;
    }

    static com.google.javascript.rhino.Node getCatchHandlerForBlock(com.google.javascript.rhino.Node block) {
        if (((block.isBlock()) && (block.getParent().isTry())) && ((block.getParent().getFirstChild()) == block)) {
            for (com.google.javascript.rhino.Node s = block.getNext(); s != null; s = s.getNext()) {
                if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(s)) {
                    return s.getFirstChild();
                }
            }
        }
        return null;
    }

    private static class AstControlFlowGraph extends com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> {
        private final java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities;

        private AstControlFlowGraph(com.google.javascript.rhino.Node entry, java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer> priorities, boolean edgeAnnotations) {
            super(entry, true, edgeAnnotations);
            this.priorities = priorities;
        }

        @java.lang.Override
        public java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>> getOptionalNodeComparator(boolean isForward) {
            if (isForward) {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return (getPosition(n1)) - (getPosition(n2));
                    }
                };
            }else {
                return new java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>>() {
                    @java.lang.Override
                    public int compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n1, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n2) {
                        return (getPosition(n2)) - (getPosition(n1));
                    }
                };
            }
        }

        private int getPosition(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch> n) {
            java.lang.Integer priority = priorities.get(n);
            com.google.common.base.Preconditions.checkNotNull(priority);
            return priority;
        }
    }
}
06:52:29.294 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:765 which is executed by 33 tests
06:52:30.294 [pool-21-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:765
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:30.294 [pool-21-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:30.294 [pool-21-thread-1] DEBUG tests.output - Second set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:30.294 [pool-21-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Changing only this statement does not solve the bug. SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:765
patchCnt+tmpPatches.size() is : 0  0
06:52:31.039 [pool-29-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:765
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:31.039 [pool-29-thread-1] DEBUG tests.output - First set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:31.039 [pool-29-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:31.040 [pool-29-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Changing only this statement does not solve the bug. SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:765
patchCnt+tmpPatches.size() is : 0  0
06:52:31.040 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:764 which is executed by 33 tests
06:52:32.098 [pool-37-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:764
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:32.098 [pool-37-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:32.098 [pool-37-thread-1] DEBUG tests.output - Second set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:32.098 [pool-37-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Changing only this statement does not solve the bug. SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:764
patchCnt+tmpPatches.size() is : 0  0
06:52:38.960 [pool-45-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:764
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:38.960 [pool-45-thread-1] DEBUG tests.output - First set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:38.960 [pool-45-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:38.960 [pool-45-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Changing only this statement does not solve the bug. SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:764
patchCnt+tmpPatches.size() is : 0  0
06:52:38.960 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:752 which is executed by 34 tests
06:52:39.814 [pool-53-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:752
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:39.814 [pool-53-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:39.814 [pool-53-thread-1] DEBUG tests.output - Second set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:39.814 [pool-53-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Changing only this statement does not solve the bug. SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:752
patchCnt+tmpPatches.size() is : 0  0
06:52:39.814 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:113 which is executed by 45 tests
06:52:39.814 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1464 which is executed by 45 tests
06:52:39.814 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1014 which is executed by 45 tests
06:52:40.803 [pool-61-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1014
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:40.803 [pool-61-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:40.803 [pool-61-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:40.803 [pool-61-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1014.
patchCnt+tmpPatches.size() is : 0  0
06:52:40.804 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1013 which is executed by 45 tests
06:52:41.749 [pool-69-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1013
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:41.749 [pool-69-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:41.749 [pool-69-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_LINE_INFO. No source location information associated with BLOCK [source_file: testcode]
.
Most likely a Node has been created with settings the source file and line/column location.  Usually this is done using Node.copyInformationFrom and supplying a Node from the source AST. at testcode line (unknown line) : (unknown column)
JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<2>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:41.750 [pool-69-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1013.
patchCnt+tmpPatches.size() is : 0  0
06:52:41.750 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:757 which is executed by 48 tests
06:52:42.660 [pool-77-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:757
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:42.661 [pool-77-thread-1] DEBUG tests.output - First set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:42.661 [pool-77-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:42.661 [pool-77-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Changing only this statement does not solve the bug. SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:757
patchCnt+tmpPatches.size() is : 0  0
06:52:43.338 [pool-85-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:757
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:43.338 [pool-85-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): INTERNAL COMPILER ERROR.
Please report this problem.
null
  Node(EXPR_RESULT): :1:100
[source unknown]
  Parent(BLOCK): :1:98
[source unknown]
, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): null, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): null]
06:52:43.338 [pool-85-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:43.338 [pool-85-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:757.
patchCnt+tmpPatches.size() is : 0  0
06:52:43.338 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:751 which is executed by 48 tests
06:52:44.283 [pool-93-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:751
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:44.283 [pool-93-thread-1] DEBUG tests.output - First set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:44.283 [pool-93-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:44.283 [pool-93-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Changing only this statement does not solve the bug. SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:751
patchCnt+tmpPatches.size() is : 0  0
06:52:44.947 [pool-101-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:751
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:44.948 [pool-101-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:44.948 [pool-101-thread-1] DEBUG tests.output - Second set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:44.948 [pool-101-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Changing only this statement does not solve the bug. SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:751
patchCnt+tmpPatches.size() is : 0  0
06:52:44.948 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:545 which is executed by 48 tests
06:52:45.194 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:544 which is executed by 48 tests
06:52:46.036 [pool-109-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:544
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:46.036 [pool-109-thread-1] DEBUG tests.output - First set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:46.036 [pool-109-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:46.036 [pool-109-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Changing only this statement does not solve the bug. SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:544
patchCnt+tmpPatches.size() is : 0  0
06:52:46.036 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:333 which is executed by 48 tests
06:52:46.242 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:332 which is executed by 48 tests
06:52:46.462 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:287 which is executed by 48 tests
06:52:47.385 [pool-117-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:287
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:47.386 [pool-117-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:47.386 [pool-117-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): INTERNAL COMPILER ERROR.
Please report this problem.
null
  Node(FUNCTION foo): :1:24
[source unknown]
  Parent(SCRIPT): :1:0
[source unknown]
, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): null, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): null]
06:52:47.386 [pool-117-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:287.
patchCnt+tmpPatches.size() is : 0  0
06:52:47.386 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:286 which is executed by 48 tests
06:52:48.248 [pool-125-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:286
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:48.248 [pool-125-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:48.248 [pool-125-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:48.248 [pool-125-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:286.
patchCnt+tmpPatches.size() is : 0  0
06:52:48.248 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:285 which is executed by 48 tests
06:52:49.074 [pool-133-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:285
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:49.075 [pool-133-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): INTERNAL COMPILER ERROR.
Please report this problem.
null
  Node(BLOCK): :1:0
[source unknown]
  Parent(TRY): :1:53
[source unknown]
, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): null, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): null]
06:52:49.075 [pool-133-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): INTERNAL COMPILER ERROR.
Please report this problem.
null
  Node(FUNCTION foo): :1:24
[source unknown]
  Parent(SCRIPT): :1:0
[source unknown]
, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:49.075 [pool-133-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:285.
patchCnt+tmpPatches.size() is : 0  0
06:52:49.075 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:231 which is executed by 48 tests
06:52:49.272 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:230 which is executed by 48 tests
06:52:49.461 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:750 which is executed by 52 tests
06:52:50.313 [pool-146-thread-1] DEBUG f.i.l.c.t.SpecificationTestCasesListener - Same input with different outcome, logical contradiction, discarding the second one discarded={cfa.priorityCounter=0, cfa.astPosition.size()=15, cfa.exceptionHandler.isEmpty()=false, cfa.exceptionHandler.size()=2, fromNode!=null=true, cfa.cfg!=null=true, cfa.exceptionHandler!=null=true, parent!=null=true, cfa.nodePriorities!=null=true, cfa.nodePriorities.size()=0, cfa.finallyMap!=null=true, cfa.priorityComparator!=null=true, cfa.compiler!=null=true, cfa.nodePriorities.isEmpty()=true, cfa.astPosition.isEmpty()=false, cfa.astPosition!=null=true, cfa.root!=null=true, cfa.shouldTraverseFunctions=false, node!=null=true, cfa.edgeAnnotations=true, cfa.astPositionCounter=15, cfa!=null=true}, current output=true, reference output=false
06:52:50.313 [pool-146-thread-1] DEBUG f.i.l.c.t.SpecificationTestCasesListener - Same input with different outcome, logical contradiction, discarding the second one discarded={cfa.priorityCounter=0, cfa.astPosition.size()=15, cfa.exceptionHandler.isEmpty()=false, cfa.exceptionHandler.size()=2, fromNode!=null=true, cfa.cfg!=null=true, cfa.exceptionHandler!=null=true, parent!=null=true, cfa.nodePriorities!=null=true, cfa.nodePriorities.size()=0, cfa.finallyMap!=null=true, cfa.priorityComparator!=null=true, cfa.compiler!=null=true, cfa.nodePriorities.isEmpty()=true, cfa.astPosition.isEmpty()=false, cfa.astPosition!=null=true, cfa.root!=null=true, cfa.shouldTraverseFunctions=false, node!=null=true, cfa.edgeAnnotations=false, cfa.astPositionCounter=15, cfa!=null=true}, current output=true, reference output=false
06:52:50.313 [pool-146-thread-1] DEBUG f.i.l.c.t.SpecificationTestCasesListener - Same input with different outcome, logical contradiction, discarding the second one discarded={cfa.priorityCounter=0, cfa.astPosition.size()=19, cfa.exceptionHandler.isEmpty()=false, cfa.exceptionHandler.size()=1, fromNode!=null=true, cfa.cfg!=null=true, cfa.exceptionHandler!=null=true, parent!=null=true, cfa.nodePriorities!=null=true, cfa.nodePriorities.size()=0, cfa.finallyMap!=null=true, cfa.priorityComparator!=null=true, cfa.compiler!=null=true, cfa.nodePriorities.isEmpty()=true, cfa.astPosition.isEmpty()=false, cfa.astPosition!=null=true, cfa.root!=null=true, cfa.shouldTraverseFunctions=false, node!=null=true, cfa.edgeAnnotations=true, cfa.astPositionCounter=19, cfa!=null=true}, current output=true, reference output=false
06:52:50.313 [pool-146-thread-1] DEBUG f.i.l.c.t.SpecificationTestCasesListener - Same input with different outcome, logical contradiction, discarding the second one discarded={cfa.priorityCounter=0, cfa.astPosition.size()=19, cfa.exceptionHandler.isEmpty()=false, cfa.exceptionHandler.size()=1, fromNode!=null=true, cfa.cfg!=null=true, cfa.exceptionHandler!=null=true, parent!=null=true, cfa.nodePriorities!=null=true, cfa.nodePriorities.size()=0, cfa.finallyMap!=null=true, cfa.priorityComparator!=null=true, cfa.compiler!=null=true, cfa.nodePriorities.isEmpty()=true, cfa.astPosition.isEmpty()=false, cfa.astPosition!=null=true, cfa.root!=null=true, cfa.shouldTraverseFunctions=false, node!=null=true, cfa.edgeAnnotations=false, cfa.astPositionCounter=19, cfa!=null=true}, current output=true, reference output=false
06:52:50.316 [pool-141-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:750
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:50.316 [pool-141-thread-1] DEBUG tests.output - First set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:50.316 [pool-141-thread-1] DEBUG tests.output - Second set: 
[testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:50.316 [pool-141-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Changing only this statement does not solve the bug. SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:750
patchCnt+tmpPatches.size() is : 0  0
06:52:50.316 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:166 which is executed by 57 tests
06:52:50.316 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:165 which is executed by 57 tests
06:52:50.316 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:151 which is executed by 57 tests
06:52:50.316 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1480 which is executed by 57 tests
06:52:50.316 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1472 which is executed by 57 tests
06:52:50.317 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1471 which is executed by 57 tests
06:52:50.317 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1470 which is executed by 57 tests
06:52:50.317 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1006 which is executed by 57 tests
06:52:51.209 [pool-149-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1006
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:51.209 [pool-149-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:51.209 [pool-149-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Missing catch or finally for try statement. Reference node TRY 1 [source_file: testcode], testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:51.209 [pool-149-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1006.
patchCnt+tmpPatches.size() is : 0  0
06:52:51.209 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.NodeUtil:2769 which is executed by 58 tests
06:52:51.576 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.NodeUtil:2768 which is executed by 58 tests
06:52:52.777 [pool-157-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.NodeUtil:2768
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:52.777 [pool-157-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:52.777 [pool-157-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:52.777 [pool-157-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2768.
patchCnt+tmpPatches.size() is : 0  0
06:52:52.777 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.NodeUtil:2760 which is executed by 58 tests
06:52:53.119 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.NodeUtil:2759 which is executed by 58 tests
06:52:54.249 [pool-165-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.NodeUtil:2759
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:54.249 [pool-165-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:54.249 [pool-165-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:54.249 [pool-165-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2759.
patchCnt+tmpPatches.size() is : 0  0
06:52:54.249 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.NodeUtil:2751 which is executed by 62 tests
06:52:54.576 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.NodeUtil:2750 which is executed by 62 tests
06:52:55.670 [pool-173-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.NodeUtil:2750
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:55.670 [pool-173-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:55.670 [pool-173-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:55.670 [pool-173-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2750.
patchCnt+tmpPatches.size() is : 0  0
06:52:55.670 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:515 which is executed by 86 tests
06:52:55.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.TokenStream:264 which is executed by 92 tests
06:52:55.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:152 which is executed by 117 tests
06:52:55.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:150 which is executed by 117 tests
06:52:55.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:149 which is executed by 117 tests
06:52:55.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:141 which is executed by 117 tests
06:52:55.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:121 which is executed by 117 tests
06:52:55.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:112 which is executed by 117 tests
06:52:55.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:103 which is executed by 117 tests
06:52:55.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:96 which is executed by 117 tests
06:52:55.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:95 which is executed by 117 tests
06:52:55.853 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:94 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:93 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.TryStatement:85 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1488 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1484 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1482 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1479 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1478 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1477 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1476 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1475 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1469 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1468 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1412 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1411 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1410 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1408 which is executed by 117 tests
06:52:55.854 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1406 which is executed by 117 tests
06:52:55.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1405 which is executed by 117 tests
06:52:55.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1402 which is executed by 117 tests
06:52:55.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1401 which is executed by 117 tests
06:52:55.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1399 which is executed by 117 tests
06:52:55.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1396 which is executed by 117 tests
06:52:55.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1395 which is executed by 117 tests
06:52:55.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1003 which is executed by 117 tests
06:52:55.855 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:266 which is executed by 117 tests
06:52:56.010 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:390 which is executed by 68089 tests
06:52:56.249 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1017 which is executed by 117 tests
06:52:56.461 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1012 which is executed by 117 tests
06:52:57.350 [pool-181-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1012
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:57.350 [pool-181-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:57.350 [pool-181-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_LINE_INFO. No source location information associated with BLOCK [source_file: testcode]
.
Most likely a Node has been created with settings the source file and line/column location.  Usually this is done using Node.copyInformationFrom and supplying a Node from the source AST. at testcode line (unknown line) : (unknown column)
JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<2>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:57.350 [pool-181-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1012.
patchCnt+tmpPatches.size() is : 0  0
06:52:58.056 [pool-189-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1012
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:58.056 [pool-189-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_LINE_INFO. No source location information associated with BLOCK [source_file: testcode]
.
Most likely a Node has been created with settings the source file and line/column location.  Usually this is done using Node.copyInformationFrom and supplying a Node from the source AST. at testcode line (unknown line) : (unknown column)
JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<2>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:58.056 [pool-189-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:58.056 [pool-189-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1012.
patchCnt+tmpPatches.size() is : 0  0
06:52:58.056 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1005 which is executed by 117 tests
06:52:58.989 [pool-197-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1005
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:58.989 [pool-197-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:58.989 [pool-197-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Missing catch or finally for try statement. Reference node TRY 1 [source_file: testcode], testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:58.989 [pool-197-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1005.
patchCnt+tmpPatches.size() is : 0  0
06:52:59.678 [pool-205-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1005
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:52:59.678 [pool-205-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Missing catch or finally for try statement. Reference node TRY 1 [source_file: testcode], testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:59.678 [pool-205-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:52:59.678 [pool-205-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1005.
patchCnt+tmpPatches.size() is : 0  0
06:52:59.678 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1004 which is executed by 117 tests
06:52:59.907 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1002 which is executed by 117 tests
06:53:00.816 [pool-213-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1002
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:53:00.817 [pool-213-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:53:00.817 [pool-213-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Expected CATCH but was EXPR_RESULT Reference node EXPR_RESULT 1 [source_file: testcode], testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:53:00.817 [pool-213-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1002.
patchCnt+tmpPatches.size() is : 0  0
06:53:00.817 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:992 which is executed by 117 tests
06:53:01.732 [pool-221-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:992
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:53:01.732 [pool-221-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:53:01.732 [pool-221-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:53:01.732 [pool-221-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:992.
patchCnt+tmpPatches.size() is : 0  0
06:53:01.732 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:990 which is executed by 117 tests
06:53:01.981 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:989 which is executed by 117 tests
06:53:02.301 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:987 which is executed by 117 tests
06:53:02.511 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:260 which is executed by 292 tests
06:53:02.723 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.NodeUtil:1683 which is executed by 307 tests
06:53:03.093 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.NodeUtil:1680 which is executed by 391 tests
06:53:04.227 [pool-229-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.NodeUtil:1680
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:53:04.227 [pool-229-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:53:04.227 [pool-229-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): INTERNAL COMPILER ERROR.
Please report this problem.
IF 1 [source_file: testcode] does not have a condition.
  Node(IF): :1:68
[source unknown]
  Parent(BLOCK): :1:57
[source unknown]
, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): null, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): null]
06:53:04.227 [pool-229-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1680.
patchCnt+tmpPatches.size() is : 0  0
06:53:04.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.TokenStream:203 which is executed by 417 tests
06:53:04.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:934 which is executed by 671 tests
06:53:04.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:929 which is executed by 671 tests
06:53:04.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:925 which is executed by 671 tests
06:53:04.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:924 which is executed by 671 tests
06:53:04.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:922 which is executed by 671 tests
06:53:04.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:920 which is executed by 671 tests
06:53:04.227 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:919 which is executed by 671 tests
06:53:04.228 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:917 which is executed by 671 tests
06:53:04.228 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:897 which is executed by 752 tests
06:53:04.228 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:176 which is executed by 839 tests
06:53:04.975 [pool-237-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:176
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:53:04.975 [pool-237-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.BreakStatement, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.BreakStatement, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.BreakStatement]
06:53:04.975 [pool-237-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:53:04.975 [pool-237-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:176.
patchCnt+tmpPatches.size() is : 0  0
06:53:04.975 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:175 which is executed by 839 tests
06:53:05.709 [pool-245-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:175
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:53:05.709 [pool-245-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:53:05.709 [pool-245-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.BreakStatement, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.BreakStatement, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.BreakStatement]
06:53:05.709 [pool-245-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:175.
patchCnt+tmpPatches.size() is : 0  0
06:53:06.315 [pool-253-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:175
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:53:06.315 [pool-253-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected node type.  class: class com.google.javascript.rhino.head.ast.Scope type: BLOCK, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): Unexpected node type.  class: class com.google.javascript.rhino.head.ast.Scope type: BLOCK, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): Unexpected node type.  class: class com.google.javascript.rhino.head.ast.Scope type: BLOCK]
06:53:06.315 [pool-253-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:53:06.316 [pool-253-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:175.
patchCnt+tmpPatches.size() is : 0  0
06:53:06.316 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:914 which is executed by 839 tests
06:53:06.532 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1734 which is executed by 846 tests
06:53:06.532 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1732 which is executed by 846 tests
06:53:06.532 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1731 which is executed by 846 tests
06:53:06.532 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1730 which is executed by 846 tests
06:53:06.532 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1729 which is executed by 846 tests
06:53:06.532 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1727 which is executed by 846 tests
06:53:06.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1726 which is executed by 846 tests
06:53:06.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1725 which is executed by 846 tests
06:53:06.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1724 which is executed by 846 tests
06:53:06.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1723 which is executed by 846 tests
06:53:06.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1722 which is executed by 846 tests
06:53:06.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:1051 which is executed by 846 tests
06:53:06.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:900 which is executed by 846 tests
06:53:06.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:899 which is executed by 846 tests
06:53:06.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:896 which is executed by 846 tests
06:53:06.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:893 which is executed by 846 tests
06:53:06.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:892 which is executed by 846 tests
06:53:06.533 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:891 which is executed by 846 tests
06:53:06.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:889 which is executed by 846 tests
06:53:06.534 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory:81 which is executed by 68660 tests
06:53:06.746 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory:235 which is executed by 876 tests
06:53:06.981 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory:223 which is executed by 876 tests
06:53:07.918 [pool-261-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.IRFactory:223
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:53:07.918 [pool-261-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:53:07.918 [pool-261-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Expected BLOCK but was RETURN Reference node RETURN 1 [source_file: testcode], testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:53:07.918 [pool-261-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:223.
patchCnt+tmpPatches.size() is : 0  0
06:53:08.524 [pool-269-thread-1] DEBUG f.i.l.r.n.s.ConstraintModelBuilder - Failing test(s): SourceLocation com.google.javascript.jscomp.parsing.IRFactory:223
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest), testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest), testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest)]
06:53:08.525 [pool-269-thread-1] DEBUG tests.output - First set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Expected BLOCK but was RETURN Reference node RETURN 1 [source_file: testcode], testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:53:08.525 [pool-269-thread-1] DEBUG tests.output - Second set: 
[testIssue779(com.google.javascript.jscomp.CheckMissingReturnTest): Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>, testDeepNestedBreakwithFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found, testDeepNestedFinally(com.google.javascript.jscomp.ControlFlowAnalysisTest): No cross edges found]
06:53:08.525 [pool-269-thread-1] INFO  f.i.l.r.n.synth.SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:223.
patchCnt+tmpPatches.size() is : 0  0
06:53:08.525 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.parsing.IRFactory:222 which is executed by 876 tests
06:53:08.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:462 which is executed by 903 tests
06:53:08.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:461 which is executed by 903 tests
06:53:08.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:458 which is executed by 903 tests
06:53:08.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:457 which is executed by 903 tests
06:53:08.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:455 which is executed by 903 tests
06:53:08.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:451 which is executed by 903 tests
06:53:08.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.Parser:448 which is executed by 903 tests
06:53:08.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.Scope:121 which is executed by 903 tests
06:53:08.748 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.Scope:120 which is executed by 903 tests
06:53:08.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.Scope:119 which is executed by 903 tests
06:53:08.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.Scope:117 which is executed by 903 tests
06:53:08.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.Scope:116 which is executed by 903 tests
06:53:08.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.Scope:83 which is executed by 903 tests
06:53:08.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.Scope:92 which is executed by 1028 tests
06:53:08.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.Scope:91 which is executed by 1028 tests
06:53:08.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.ast.Scope:90 which is executed by 1028 tests
06:53:08.749 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis$1:71 which is executed by 1136 tests
06:53:08.956 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis$1:75 which is executed by 1136 tests
06:53:09.137 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.rhino.head.TokenStream:261 which is executed by 1136 tests
06:53:09.137 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:41 which is executed by 1136 tests
06:53:09.318 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:204 which is executed by 1136 tests
06:54:10.591 [pool-2-thread-1] ERROR fr.inria.lille.repair.nopol.NoPol - Timeout: execution time > 60 MINUTES
java.util.concurrent.TimeoutException: null
	at java.util.concurrent.FutureTask.get(FutureTask.java:201) [na:1.7.0_80]
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:404) [nopol-0.2-SNAPSHOT-jar-with-dependencies.jar:na]
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:381) [nopol-0.2-SNAPSHOT-jar-with-dependencies.jar:na]
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:288) [nopol-0.2-SNAPSHOT-jar-with-dependencies.jar:na]
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:156) [nopol-0.2-SNAPSHOT-jar-with-dependencies.jar:na]
	at fr.inria.lille.repair.Main$1.call(Main.java:93) [nopol-0.2-SNAPSHOT-jar-with-dependencies.jar:na]
	at java.util.concurrent.FutureTask.run(FutureTask.java:262) [na:1.7.0_80]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_80]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_80]
	at java.lang.Thread.run(Thread.java:745) [na:1.7.0_80]
06:54:10.591 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:672 which is executed by 2160 tests
06:55:05.547 [pool-2-thread-1] DEBUG fr.inria.lille.repair.nopol.NoPol - Analysing SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:671 which is executed by 2160 tests
06:56:34.922 [pool-277-thread-1] DEBUG xxl.java.junit.TestSuiteExecution - Timeout after 200 seconds. Infinite loop?
